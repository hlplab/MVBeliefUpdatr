// Generated by rstantools.  Do not edit by hand.

/*
    MVbeliefupdatr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MVbeliefupdatr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MVbeliefupdatr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_uvg_conj_uninformative_priors_sufficient_stats_lapse");
    reader.add_event(121, 119, "end", "model_uvg_conj_uninformative_priors_sufficient_stats_lapse");
    return reader;
}
#include <stan_meta_header.hpp>
class model_uvg_conj_uninformative_priors_sufficient_stats_lapse
  : public stan::model::model_base_crtp<model_uvg_conj_uninformative_priors_sufficient_stats_lapse> {
private:
        int m;
        int l;
        matrix_d n;
        matrix_d xbar;
        matrix_d xsd;
        int n_test;
        std::vector<double> x_test;
        std::vector<int> y_test;
        std::vector<std::vector<int> > z_test_counts;
        double n_each;
        matrix_d ss;
public:
    model_uvg_conj_uninformative_priors_sufficient_stats_lapse(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_uvg_conj_uninformative_priors_sufficient_stats_lapse(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::model_uvg_conj_uninformative_priors_sufficient_stats_lapse";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "l", "int", context__.to_vec());
            l = int(0);
            vals_i__ = context__.vals_i("l");
            pos__ = 0;
            l = vals_i__[pos__++];
            current_statement_begin__ = 20;
            validate_non_negative_index("n", "m", m);
            validate_non_negative_index("n", "l", l);
            context__.validate_dims("data initialization", "n", "matrix_d", context__.to_vec(m,l));
            n = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, l);
            vals_r__ = context__.vals_r("n");
            pos__ = 0;
            size_t n_j_2_max__ = l;
            size_t n_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < n_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < n_j_1_max__; ++j_1__) {
                    n(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 21;
            validate_non_negative_index("xbar", "m", m);
            validate_non_negative_index("xbar", "l", l);
            context__.validate_dims("data initialization", "xbar", "matrix_d", context__.to_vec(m,l));
            xbar = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, l);
            vals_r__ = context__.vals_r("xbar");
            pos__ = 0;
            size_t xbar_j_2_max__ = l;
            size_t xbar_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < xbar_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xbar_j_1_max__; ++j_1__) {
                    xbar(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 22;
            validate_non_negative_index("xsd", "m", m);
            validate_non_negative_index("xsd", "l", l);
            context__.validate_dims("data initialization", "xsd", "matrix_d", context__.to_vec(m,l));
            xsd = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, l);
            vals_r__ = context__.vals_r("xsd");
            pos__ = 0;
            size_t xsd_j_2_max__ = l;
            size_t xsd_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < xsd_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < xsd_j_1_max__; ++j_1__) {
                    xsd(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "n_test", "int", context__.to_vec());
            n_test = int(0);
            vals_i__ = context__.vals_i("n_test");
            pos__ = 0;
            n_test = vals_i__[pos__++];
            current_statement_begin__ = 25;
            validate_non_negative_index("x_test", "n_test", n_test);
            context__.validate_dims("data initialization", "x_test", "double", context__.to_vec(n_test));
            x_test = std::vector<double>(n_test, double(0));
            vals_r__ = context__.vals_r("x_test");
            pos__ = 0;
            size_t x_test_k_0_max__ = n_test;
            for (size_t k_0__ = 0; k_0__ < x_test_k_0_max__; ++k_0__) {
                x_test[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 26;
            validate_non_negative_index("y_test", "n_test", n_test);
            context__.validate_dims("data initialization", "y_test", "int", context__.to_vec(n_test));
            y_test = std::vector<int>(n_test, int(0));
            vals_i__ = context__.vals_i("y_test");
            pos__ = 0;
            size_t y_test_k_0_max__ = n_test;
            for (size_t k_0__ = 0; k_0__ < y_test_k_0_max__; ++k_0__) {
                y_test[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 27;
            validate_non_negative_index("z_test_counts", "n_test", n_test);
            validate_non_negative_index("z_test_counts", "m", m);
            context__.validate_dims("data initialization", "z_test_counts", "int", context__.to_vec(n_test,m));
            z_test_counts = std::vector<std::vector<int> >(n_test, std::vector<int>(m, int(0)));
            vals_i__ = context__.vals_i("z_test_counts");
            pos__ = 0;
            size_t z_test_counts_k_0_max__ = n_test;
            size_t z_test_counts_k_1_max__ = m;
            for (size_t k_1__ = 0; k_1__ < z_test_counts_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < z_test_counts_k_0_max__; ++k_0__) {
                    z_test_counts[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 31;
            n_each = double(0);
            stan::math::fill(n_each, DUMMY_VAR__);
            current_statement_begin__ = 32;
            validate_non_negative_index("ss", "m", m);
            validate_non_negative_index("ss", "l", l);
            ss = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, l);
            stan::math::fill(ss, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 33;
            stan::math::assign(ss, elt_multiply(subtract(n, 1), xsd));
            current_statement_begin__ = 35;
            stan::math::assign(n_each, max(n));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            validate_non_negative_index("m_0", "m", m);
            num_params_r__ += (1 * m);
            current_statement_begin__ = 44;
            validate_non_negative_index("S_0", "m", m);
            num_params_r__ += (1 * m);
            current_statement_begin__ = 45;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_uvg_conj_uninformative_priors_sufficient_stats_lapse() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 41;
        if (!(context__.contains_r("kappa_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable kappa_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("kappa_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "kappa_0", "double", context__.to_vec());
        double kappa_0(0);
        kappa_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, kappa_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable kappa_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("nu_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "nu_0", "double", context__.to_vec());
        double nu_0(0);
        nu_0 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, nu_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("m_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable m_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("m_0");
        pos__ = 0U;
        validate_non_negative_index("m_0", "m", m);
        context__.validate_dims("parameter initialization", "m_0", "double", context__.to_vec(m));
        std::vector<double> m_0(m, double(0));
        size_t m_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < m_0_k_0_max__; ++k_0__) {
            m_0[k_0__] = vals_r__[pos__++];
        }
        size_t m_0_i_0_max__ = m;
        for (size_t i_0__ = 0; i_0__ < m_0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(m_0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable m_0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 44;
        if (!(context__.contains_r("S_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_0");
        pos__ = 0U;
        validate_non_negative_index("S_0", "m", m);
        context__.validate_dims("parameter initialization", "S_0", "double", context__.to_vec(m));
        std::vector<double> S_0(m, double(0));
        size_t S_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < S_0_k_0_max__; ++k_0__) {
            S_0[k_0__] = vals_r__[pos__++];
        }
        size_t S_0_i_0_max__ = m;
        for (size_t i_0__ = 0; i_0__ < S_0_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, S_0[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_0: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 45;
        if (!(context__.contains_r("lapse_rate")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lapse_rate missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lapse_rate");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lapse_rate", "double", context__.to_vec());
        double lapse_rate(0);
        lapse_rate = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 1, lapse_rate);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lapse_rate: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 41;
            local_scalar_t__ kappa_0;
            (void) kappa_0;  // dummy to suppress unused var warning
            if (jacobian__)
                kappa_0 = in__.scalar_lb_constrain(0, lp__);
            else
                kappa_0 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 42;
            local_scalar_t__ nu_0;
            (void) nu_0;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_0 = in__.scalar_lb_constrain(0, lp__);
            else
                nu_0 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 43;
            std::vector<local_scalar_t__> m_0;
            size_t m_0_d_0_max__ = m;
            m_0.reserve(m_0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < m_0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    m_0.push_back(in__.scalar_constrain(lp__));
                else
                    m_0.push_back(in__.scalar_constrain());
            }
            current_statement_begin__ = 44;
            std::vector<local_scalar_t__> S_0;
            size_t S_0_d_0_max__ = m;
            S_0.reserve(S_0_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < S_0_d_0_max__; ++d_0__) {
                if (jacobian__)
                    S_0.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    S_0.push_back(in__.scalar_lb_constrain(0));
            }
            current_statement_begin__ = 45;
            local_scalar_t__ lapse_rate;
            (void) lapse_rate;  // dummy to suppress unused var warning
            if (jacobian__)
                lapse_rate = in__.scalar_lub_constrain(0, 1, lp__);
            else
                lapse_rate = in__.scalar_lub_constrain(0, 1);
            // transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("m_n", "m", m);
            validate_non_negative_index("m_n", "l", l);
            std::vector<std::vector<local_scalar_t__> > m_n(m, std::vector<local_scalar_t__>(l, local_scalar_t__(0)));
            stan::math::initialize(m_n, DUMMY_VAR__);
            stan::math::fill(m_n, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("kappa_n", "m", m);
            validate_non_negative_index("kappa_n", "l", l);
            std::vector<std::vector<local_scalar_t__> > kappa_n(m, std::vector<local_scalar_t__>(l, local_scalar_t__(0)));
            stan::math::initialize(kappa_n, DUMMY_VAR__);
            stan::math::fill(kappa_n, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("S_n", "m", m);
            validate_non_negative_index("S_n", "l", l);
            std::vector<std::vector<local_scalar_t__> > S_n(m, std::vector<local_scalar_t__>(l, local_scalar_t__(0)));
            stan::math::initialize(S_n, DUMMY_VAR__);
            stan::math::fill(S_n, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("nu_n", "m", m);
            validate_non_negative_index("nu_n", "l", l);
            std::vector<std::vector<local_scalar_t__> > nu_n(m, std::vector<local_scalar_t__>(l, local_scalar_t__(0)));
            stan::math::initialize(nu_n, DUMMY_VAR__);
            stan::math::fill(nu_n, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("t_scale", "m", m);
            validate_non_negative_index("t_scale", "l", l);
            std::vector<std::vector<local_scalar_t__> > t_scale(m, std::vector<local_scalar_t__>(l, local_scalar_t__(0)));
            stan::math::initialize(t_scale, DUMMY_VAR__);
            stan::math::fill(t_scale, DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("p_test_conj", "m", m);
            validate_non_negative_index("p_test_conj", "n_test", n_test);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > p_test_conj(n_test, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(m));
            stan::math::initialize(p_test_conj, DUMMY_VAR__);
            stan::math::fill(p_test_conj, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("log_p_test_conj", "m", m);
            validate_non_negative_index("log_p_test_conj", "n_test", n_test);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > log_p_test_conj(n_test, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(m));
            stan::math::initialize(log_p_test_conj, DUMMY_VAR__);
            stan::math::fill(log_p_test_conj, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 60;
            for (int cat = 1; cat <= m; ++cat) {
                current_statement_begin__ = 61;
                for (int group = 1; group <= l; ++group) {
                    current_statement_begin__ = 62;
                    stan::model::assign(kappa_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (kappa_0 + get_base1(n, cat, group, "n", 1)), 
                                "assigning variable kappa_n");
                    current_statement_begin__ = 63;
                    stan::model::assign(nu_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (nu_0 + get_base1(n, cat, group, "n", 1)), 
                                "assigning variable nu_n");
                    current_statement_begin__ = 64;
                    stan::model::assign(m_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (((get_base1(m_0, cat, "m_0", 1) * kappa_0) + (get_base1(xbar, cat, group, "xbar", 1) * get_base1(n, cat, group, "n", 1))) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)), 
                                "assigning variable m_n");
                    current_statement_begin__ = 65;
                    stan::model::assign(S_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                stan::math::sqrt(((((nu_0 * pow(get_base1(S_0, cat, "S_0", 1), 2)) + get_base1(ss, cat, group, "ss", 1)) + (((get_base1(n, cat, group, "n", 1) * kappa_0) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)) * pow((get_base1(m_0, cat, "m_0", 1) - get_base1(xbar, cat, group, "xbar", 1)), 2))) / get_base1(get_base1(nu_n, cat, "nu_n", 1), group, "nu_n", 2))), 
                                "assigning variable S_n");
                    current_statement_begin__ = 71;
                    stan::model::assign(t_scale, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (get_base1(get_base1(S_n, cat, "S_n", 1), group, "S_n", 2) * stan::math::sqrt(((get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2) + 1) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)))), 
                                "assigning variable t_scale");
                }
            }
            current_statement_begin__ = 76;
            for (int j = 1; j <= n_test; ++j) {
                {
                current_statement_begin__ = 77;
                int group(0);
                (void) group;  // dummy to suppress unused var warning
                stan::math::fill(group, std::numeric_limits<int>::min());
                current_statement_begin__ = 78;
                stan::math::assign(group, get_base1(y_test, j, "y_test", 1));
                current_statement_begin__ = 80;
                for (int cat = 1; cat <= m; ++cat) {
                    current_statement_begin__ = 81;
                    stan::model::assign(log_p_test_conj, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(cat), stan::model::nil_index_list())), 
                                student_t_log(get_base1(x_test, j, "x_test", 1), get_base1(get_base1(nu_n, cat, "nu_n", 1), group, "nu_n", 2), get_base1(get_base1(m_n, cat, "m_n", 1), group, "m_n", 2), get_base1(get_base1(t_scale, cat, "t_scale", 1), group, "t_scale", 2)), 
                                "assigning variable log_p_test_conj");
                }
                current_statement_begin__ = 87;
                stan::model::assign(p_test_conj, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            stan::math::exp(subtract(get_base1(log_p_test_conj, j, "log_p_test_conj", 1), log_sum_exp(get_base1(log_p_test_conj, j, "log_p_test_conj", 1)))), 
                            "assigning variable p_test_conj");
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 50;
            size_t m_n_k_0_max__ = m;
            size_t m_n_k_1_max__ = l;
            for (size_t k_0__ = 0; k_0__ < m_n_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < m_n_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(m_n[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: m_n" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable m_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 51;
            size_t kappa_n_k_0_max__ = m;
            size_t kappa_n_k_1_max__ = l;
            for (size_t k_0__ = 0; k_0__ < kappa_n_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < kappa_n_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(kappa_n[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: kappa_n" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable kappa_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t kappa_n_i_0_max__ = m;
            size_t kappa_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < kappa_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < kappa_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "kappa_n[i_0__][i_1__]", kappa_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 52;
            size_t S_n_k_0_max__ = m;
            size_t S_n_k_1_max__ = l;
            for (size_t k_0__ = 0; k_0__ < S_n_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < S_n_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(S_n[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: S_n" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable S_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t S_n_i_0_max__ = m;
            size_t S_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < S_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < S_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "S_n[i_0__][i_1__]", S_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 53;
            size_t nu_n_k_0_max__ = m;
            size_t nu_n_k_1_max__ = l;
            for (size_t k_0__ = 0; k_0__ < nu_n_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < nu_n_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(nu_n[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: nu_n" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable nu_n: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t nu_n_i_0_max__ = m;
            size_t nu_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < nu_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < nu_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "nu_n[i_0__][i_1__]", nu_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 54;
            size_t t_scale_k_0_max__ = m;
            size_t t_scale_k_1_max__ = l;
            for (size_t k_0__ = 0; k_0__ < t_scale_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < t_scale_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(t_scale[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: t_scale" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable t_scale: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t t_scale_i_0_max__ = m;
            size_t t_scale_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < t_scale_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_scale_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_scale[i_0__][i_1__]", t_scale[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 55;
            size_t p_test_conj_k_0_max__ = n_test;
            size_t p_test_conj_j_1_max__ = m;
            for (size_t k_0__ = 0; k_0__ < p_test_conj_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < p_test_conj_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(p_test_conj[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: p_test_conj" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable p_test_conj: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            size_t p_test_conj_i_0_max__ = n_test;
            for (size_t i_0__ = 0; i_0__ < p_test_conj_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "p_test_conj[i_0__]", p_test_conj[i_0__]);
            }
            current_statement_begin__ = 56;
            size_t log_p_test_conj_k_0_max__ = n_test;
            size_t log_p_test_conj_j_1_max__ = m;
            for (size_t k_0__ = 0; k_0__ < log_p_test_conj_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < log_p_test_conj_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(log_p_test_conj[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: log_p_test_conj" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable log_p_test_conj: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            {
            current_statement_begin__ = 92;
            validate_non_negative_index("lapsing_probs", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lapsing_probs(m);
            stan::math::initialize(lapsing_probs, DUMMY_VAR__);
            stan::math::fill(lapsing_probs, DUMMY_VAR__);
            current_statement_begin__ = 94;
            stan::math::assign(lapsing_probs, rep_vector((lapse_rate / m), m));
            current_statement_begin__ = 97;
            lp_accum__.add(normal_log<propto__>(kappa_0, 0, (n_each * 4)));
            current_statement_begin__ = 98;
            lp_accum__.add(normal_log<propto__>(nu_0, 0, (n_each * 4)));
            current_statement_begin__ = 100;
            lp_accum__.add(normal_log<propto__>(m_0, 0, 100));
            current_statement_begin__ = 101;
            lp_accum__.add(uniform_log<propto__>(S_0, 0, 100));
            current_statement_begin__ = 103;
            for (int i = 1; i <= n_test; ++i) {
                current_statement_begin__ = 104;
                lp_accum__.add(multinomial_log<propto__>(get_base1(z_test_counts, i, "z_test_counts", 1), add(multiply(get_base1(p_test_conj, i, "p_test_conj", 1), (1 - lapse_rate)), lapsing_probs)));
            }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("kappa_0");
        names__.push_back("nu_0");
        names__.push_back("m_0");
        names__.push_back("S_0");
        names__.push_back("lapse_rate");
        names__.push_back("m_n");
        names__.push_back("kappa_n");
        names__.push_back("S_n");
        names__.push_back("nu_n");
        names__.push_back("t_scale");
        names__.push_back("p_test_conj");
        names__.push_back("log_p_test_conj");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(l);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(l);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(l);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(l);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dims__.push_back(l);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_test);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_test);
        dims__.push_back(m);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double kappa_0 = in__.scalar_lb_constrain(0);
        vars__.push_back(kappa_0);
        double nu_0 = in__.scalar_lb_constrain(0);
        vars__.push_back(nu_0);
        std::vector<double> m_0;
        size_t m_0_d_0_max__ = m;
        m_0.reserve(m_0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < m_0_d_0_max__; ++d_0__) {
            m_0.push_back(in__.scalar_constrain());
        }
        size_t m_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < m_0_k_0_max__; ++k_0__) {
            vars__.push_back(m_0[k_0__]);
        }
        std::vector<double> S_0;
        size_t S_0_d_0_max__ = m;
        S_0.reserve(S_0_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < S_0_d_0_max__; ++d_0__) {
            S_0.push_back(in__.scalar_lb_constrain(0));
        }
        size_t S_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < S_0_k_0_max__; ++k_0__) {
            vars__.push_back(S_0[k_0__]);
        }
        double lapse_rate = in__.scalar_lub_constrain(0, 1);
        vars__.push_back(lapse_rate);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 50;
            validate_non_negative_index("m_n", "m", m);
            validate_non_negative_index("m_n", "l", l);
            std::vector<std::vector<double> > m_n(m, std::vector<double>(l, double(0)));
            stan::math::initialize(m_n, DUMMY_VAR__);
            stan::math::fill(m_n, DUMMY_VAR__);
            current_statement_begin__ = 51;
            validate_non_negative_index("kappa_n", "m", m);
            validate_non_negative_index("kappa_n", "l", l);
            std::vector<std::vector<double> > kappa_n(m, std::vector<double>(l, double(0)));
            stan::math::initialize(kappa_n, DUMMY_VAR__);
            stan::math::fill(kappa_n, DUMMY_VAR__);
            current_statement_begin__ = 52;
            validate_non_negative_index("S_n", "m", m);
            validate_non_negative_index("S_n", "l", l);
            std::vector<std::vector<double> > S_n(m, std::vector<double>(l, double(0)));
            stan::math::initialize(S_n, DUMMY_VAR__);
            stan::math::fill(S_n, DUMMY_VAR__);
            current_statement_begin__ = 53;
            validate_non_negative_index("nu_n", "m", m);
            validate_non_negative_index("nu_n", "l", l);
            std::vector<std::vector<double> > nu_n(m, std::vector<double>(l, double(0)));
            stan::math::initialize(nu_n, DUMMY_VAR__);
            stan::math::fill(nu_n, DUMMY_VAR__);
            current_statement_begin__ = 54;
            validate_non_negative_index("t_scale", "m", m);
            validate_non_negative_index("t_scale", "l", l);
            std::vector<std::vector<double> > t_scale(m, std::vector<double>(l, double(0)));
            stan::math::initialize(t_scale, DUMMY_VAR__);
            stan::math::fill(t_scale, DUMMY_VAR__);
            current_statement_begin__ = 55;
            validate_non_negative_index("p_test_conj", "m", m);
            validate_non_negative_index("p_test_conj", "n_test", n_test);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > p_test_conj(n_test, Eigen::Matrix<double, Eigen::Dynamic, 1>(m));
            stan::math::initialize(p_test_conj, DUMMY_VAR__);
            stan::math::fill(p_test_conj, DUMMY_VAR__);
            current_statement_begin__ = 56;
            validate_non_negative_index("log_p_test_conj", "m", m);
            validate_non_negative_index("log_p_test_conj", "n_test", n_test);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > log_p_test_conj(n_test, Eigen::Matrix<double, Eigen::Dynamic, 1>(m));
            stan::math::initialize(log_p_test_conj, DUMMY_VAR__);
            stan::math::fill(log_p_test_conj, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 60;
            for (int cat = 1; cat <= m; ++cat) {
                current_statement_begin__ = 61;
                for (int group = 1; group <= l; ++group) {
                    current_statement_begin__ = 62;
                    stan::model::assign(kappa_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (kappa_0 + get_base1(n, cat, group, "n", 1)), 
                                "assigning variable kappa_n");
                    current_statement_begin__ = 63;
                    stan::model::assign(nu_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (nu_0 + get_base1(n, cat, group, "n", 1)), 
                                "assigning variable nu_n");
                    current_statement_begin__ = 64;
                    stan::model::assign(m_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (((get_base1(m_0, cat, "m_0", 1) * kappa_0) + (get_base1(xbar, cat, group, "xbar", 1) * get_base1(n, cat, group, "n", 1))) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)), 
                                "assigning variable m_n");
                    current_statement_begin__ = 65;
                    stan::model::assign(S_n, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                stan::math::sqrt(((((nu_0 * pow(get_base1(S_0, cat, "S_0", 1), 2)) + get_base1(ss, cat, group, "ss", 1)) + (((get_base1(n, cat, group, "n", 1) * kappa_0) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)) * pow((get_base1(m_0, cat, "m_0", 1) - get_base1(xbar, cat, group, "xbar", 1)), 2))) / get_base1(get_base1(nu_n, cat, "nu_n", 1), group, "nu_n", 2))), 
                                "assigning variable S_n");
                    current_statement_begin__ = 71;
                    stan::model::assign(t_scale, 
                                stan::model::cons_list(stan::model::index_uni(cat), stan::model::cons_list(stan::model::index_uni(group), stan::model::nil_index_list())), 
                                (get_base1(get_base1(S_n, cat, "S_n", 1), group, "S_n", 2) * stan::math::sqrt(((get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2) + 1) / get_base1(get_base1(kappa_n, cat, "kappa_n", 1), group, "kappa_n", 2)))), 
                                "assigning variable t_scale");
                }
            }
            current_statement_begin__ = 76;
            for (int j = 1; j <= n_test; ++j) {
                {
                current_statement_begin__ = 77;
                int group(0);
                (void) group;  // dummy to suppress unused var warning
                stan::math::fill(group, std::numeric_limits<int>::min());
                current_statement_begin__ = 78;
                stan::math::assign(group, get_base1(y_test, j, "y_test", 1));
                current_statement_begin__ = 80;
                for (int cat = 1; cat <= m; ++cat) {
                    current_statement_begin__ = 81;
                    stan::model::assign(log_p_test_conj, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::cons_list(stan::model::index_uni(cat), stan::model::nil_index_list())), 
                                student_t_log(get_base1(x_test, j, "x_test", 1), get_base1(get_base1(nu_n, cat, "nu_n", 1), group, "nu_n", 2), get_base1(get_base1(m_n, cat, "m_n", 1), group, "m_n", 2), get_base1(get_base1(t_scale, cat, "t_scale", 1), group, "t_scale", 2)), 
                                "assigning variable log_p_test_conj");
                }
                current_statement_begin__ = 87;
                stan::model::assign(p_test_conj, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            stan::math::exp(subtract(get_base1(log_p_test_conj, j, "log_p_test_conj", 1), log_sum_exp(get_base1(log_p_test_conj, j, "log_p_test_conj", 1)))), 
                            "assigning variable p_test_conj");
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 51;
            size_t kappa_n_i_0_max__ = m;
            size_t kappa_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < kappa_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < kappa_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "kappa_n[i_0__][i_1__]", kappa_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 52;
            size_t S_n_i_0_max__ = m;
            size_t S_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < S_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < S_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "S_n[i_0__][i_1__]", S_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 53;
            size_t nu_n_i_0_max__ = m;
            size_t nu_n_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < nu_n_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < nu_n_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "nu_n[i_0__][i_1__]", nu_n[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 54;
            size_t t_scale_i_0_max__ = m;
            size_t t_scale_i_1_max__ = l;
            for (size_t i_0__ = 0; i_0__ < t_scale_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < t_scale_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "t_scale[i_0__][i_1__]", t_scale[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 55;
            size_t p_test_conj_i_0_max__ = n_test;
            for (size_t i_0__ = 0; i_0__ < p_test_conj_i_0_max__; ++i_0__) {
                stan::math::check_simplex(function__, "p_test_conj[i_0__]", p_test_conj[i_0__]);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t m_n_k_0_max__ = m;
                size_t m_n_k_1_max__ = l;
                for (size_t k_1__ = 0; k_1__ < m_n_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < m_n_k_0_max__; ++k_0__) {
                        vars__.push_back(m_n[k_0__][k_1__]);
                    }
                }
                size_t kappa_n_k_0_max__ = m;
                size_t kappa_n_k_1_max__ = l;
                for (size_t k_1__ = 0; k_1__ < kappa_n_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < kappa_n_k_0_max__; ++k_0__) {
                        vars__.push_back(kappa_n[k_0__][k_1__]);
                    }
                }
                size_t S_n_k_0_max__ = m;
                size_t S_n_k_1_max__ = l;
                for (size_t k_1__ = 0; k_1__ < S_n_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < S_n_k_0_max__; ++k_0__) {
                        vars__.push_back(S_n[k_0__][k_1__]);
                    }
                }
                size_t nu_n_k_0_max__ = m;
                size_t nu_n_k_1_max__ = l;
                for (size_t k_1__ = 0; k_1__ < nu_n_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < nu_n_k_0_max__; ++k_0__) {
                        vars__.push_back(nu_n[k_0__][k_1__]);
                    }
                }
                size_t t_scale_k_0_max__ = m;
                size_t t_scale_k_1_max__ = l;
                for (size_t k_1__ = 0; k_1__ < t_scale_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < t_scale_k_0_max__; ++k_0__) {
                        vars__.push_back(t_scale[k_0__][k_1__]);
                    }
                }
                size_t p_test_conj_j_1_max__ = m;
                size_t p_test_conj_k_0_max__ = n_test;
                for (size_t j_1__ = 0; j_1__ < p_test_conj_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < p_test_conj_k_0_max__; ++k_0__) {
                        vars__.push_back(p_test_conj[k_0__](j_1__));
                    }
                }
                size_t log_p_test_conj_j_1_max__ = m;
                size_t log_p_test_conj_k_0_max__ = n_test;
                for (size_t j_1__ = 0; j_1__ < log_p_test_conj_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < log_p_test_conj_k_0_max__; ++k_0__) {
                        vars__.push_back(log_p_test_conj[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_uvg_conj_uninformative_priors_sufficient_stats_lapse";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_0";
        param_names__.push_back(param_name_stream__.str());
        size_t m_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < m_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < S_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lapse_rate";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t m_n_k_0_max__ = m;
            size_t m_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < m_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < m_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "m_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t kappa_n_k_0_max__ = m;
            size_t kappa_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < kappa_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < kappa_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "kappa_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t S_n_k_0_max__ = m;
            size_t S_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < S_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < S_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "S_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t nu_n_k_0_max__ = m;
            size_t nu_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < nu_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < nu_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "nu_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t t_scale_k_0_max__ = m;
            size_t t_scale_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < t_scale_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_scale_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "t_scale" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_test_conj_j_1_max__ = m;
            size_t p_test_conj_k_0_max__ = n_test;
            for (size_t j_1__ = 0; j_1__ < p_test_conj_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_test_conj_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_test_conj" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t log_p_test_conj_j_1_max__ = m;
            size_t log_p_test_conj_k_0_max__ = n_test;
            for (size_t j_1__ = 0; j_1__ < log_p_test_conj_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_p_test_conj_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_p_test_conj" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "kappa_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu_0";
        param_names__.push_back(param_name_stream__.str());
        size_t m_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < m_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "m_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t S_0_k_0_max__ = m;
        for (size_t k_0__ = 0; k_0__ < S_0_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_0" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "lapse_rate";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t m_n_k_0_max__ = m;
            size_t m_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < m_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < m_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "m_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t kappa_n_k_0_max__ = m;
            size_t kappa_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < kappa_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < kappa_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "kappa_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t S_n_k_0_max__ = m;
            size_t S_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < S_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < S_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "S_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t nu_n_k_0_max__ = m;
            size_t nu_n_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < nu_n_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < nu_n_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "nu_n" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t t_scale_k_0_max__ = m;
            size_t t_scale_k_1_max__ = l;
            for (size_t k_1__ = 0; k_1__ < t_scale_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < t_scale_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "t_scale" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t p_test_conj_j_1_max__ = (m - 1);
            size_t p_test_conj_k_0_max__ = n_test;
            for (size_t j_1__ = 0; j_1__ < p_test_conj_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < p_test_conj_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "p_test_conj" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t log_p_test_conj_j_1_max__ = m;
            size_t log_p_test_conj_k_0_max__ = n_test;
            for (size_t j_1__ = 0; j_1__ < log_p_test_conj_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < log_p_test_conj_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "log_p_test_conj" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::model_uvg_conj_uninformative_priors_sufficient_stats_lapse stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
