// Generated by rstantools.  Do not edit by hand.

/*
    MVbeliefupdatr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MVbeliefupdatr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MVbeliefupdatr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 34, column 2 to column 24)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 35, column 2 to column 21)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 36, column 2 to column 14)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 37, column 2 to column 23)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 38, column 2 to column 36)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 42, column 2 to column 16)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 43, column 2 to column 29)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 44, column 2 to column 25)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 45, column 2 to column 26)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 46, column 2 to column 29)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 47, column 2 to column 33)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 48, column 2 to column 36)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 53, column 6 to column 50)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 54, column 6 to column 44)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 55, column 6 to column 98)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 56, column 6 to line 61, column 49)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 62, column 6 to column 96)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 52, column 23 to line 63, column 5)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 52, column 4 to line 63, column 5)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 51, column 19 to line 64, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 51, column 2 to line 64, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 67, column 4 to column 14)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 68, column 4 to column 22)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 71, column 6 to line 74, column 66)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 70, column 21 to line 75, column 5)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 70, column 4 to line 75, column 5)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 77, column 4 to column 79)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 66, column 22 to line 78, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 66, column 2 to line 78, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 81, column 9 to column 10)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 81, column 2 to column 26)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 82, column 2 to column 48)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 84, column 2 to column 32)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 85, column 2 to column 29)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 86, column 2 to column 23)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 87, column 2 to column 24)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 89, column 4 to column 84)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 88, column 22 to line 90, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 88, column 2 to line 90, column 3)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 16, column 2 to column 8)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 17, column 2 to column 8)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 18, column 9 to column 10)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 18, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 18, column 2 to column 16)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 19, column 9 to column 10)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 19, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 19, column 2 to column 19)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 20, column 9 to column 10)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 20, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 20, column 2 to column 18)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 21, column 2 to column 13)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 22, column 14 to column 20)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 22, column 2 to column 22)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 23, column 13 to column 19)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 23, column 2 to column 21)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 24, column 20 to column 26)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 24, column 27 to column 28)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 24, column 2 to column 30)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 27, column 2 to column 14)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 28, column 9 to column 10)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 28, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 28, column 2 to column 17)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 29, column 2 to column 22)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 30, column 2 to column 18)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 36, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 37, column 20 to column 21)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 42, column 11 to column 12)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 42, column 13 to column 14)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 43, column 24 to column 25)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 43, column 26 to column 27)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 44, column 20 to column 21)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 44, column 22 to column 23)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 45, column 21 to column 22)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 45, column 23 to column 24)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 46, column 24 to column 25)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 46, column 26 to column 27)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 47, column 25 to column 31)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 47, column 10 to column 11)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 48, column 28 to column 34)",
                                                      " (in 'uvg_conj_uninformative_priors_sufficient_stats_lapse', line 48, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_uvg_conj_uninformative_priors_sufficient_stats_lapse final : public model_base_crtp<model_uvg_conj_uninformative_priors_sufficient_stats_lapse> {
private:
  int m;
  int l;
  Eigen::Matrix<double, -1, -1> n;
  Eigen::Matrix<double, -1, -1> xbar;
  Eigen::Matrix<double, -1, -1> xsd;
  int n_test;
  std::vector<double> x_test;
  std::vector<int> y_test;
  std::vector<std::vector<int>> z_test_counts;
  double n_each;
  Eigen::Matrix<double, -1, -1> ss;
 
public:
  ~model_uvg_conj_uninformative_priors_sufficient_stats_lapse() { }
  
  inline std::string model_name() const final { return "model_uvg_conj_uninformative_priors_sufficient_stats_lapse"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_uvg_conj_uninformative_priors_sufficient_stats_lapse(stan::io::var_context& context__,
                                                             unsigned int random_seed__ = 0,
                                                             std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::model_uvg_conj_uninformative_priors_sufficient_stats_lapse";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization","m","int",
          context__.to_vec());
      m = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      m = context__.vals_i("m")[(1 - 1)];
      current_statement__ = 41;
      context__.validate_dims("data initialization","l","int",
          context__.to_vec());
      l = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      l = context__.vals_i("l")[(1 - 1)];
      current_statement__ = 42;
      validate_non_negative_index("n", "m", m);
      current_statement__ = 43;
      validate_non_negative_index("n", "l", l);
      current_statement__ = 44;
      context__.validate_dims("data initialization","n","double",
          context__.to_vec(m, l));
      n = Eigen::Matrix<double, -1, -1>(m, l);
      stan::math::fill(n, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> n_flat__;
        current_statement__ = 44;
        assign(n_flat__, nil_index_list(), context__.vals_r("n"),
          "assigning variable n_flat__");
        current_statement__ = 44;
        pos__ = 1;
        current_statement__ = 44;
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          current_statement__ = 44;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 44;
            assign(n,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              n_flat__[(pos__ - 1)], "assigning variable n");
            current_statement__ = 44;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 45;
      validate_non_negative_index("xbar", "m", m);
      current_statement__ = 46;
      validate_non_negative_index("xbar", "l", l);
      current_statement__ = 47;
      context__.validate_dims("data initialization","xbar","double",
          context__.to_vec(m, l));
      xbar = Eigen::Matrix<double, -1, -1>(m, l);
      stan::math::fill(xbar, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> xbar_flat__;
        current_statement__ = 47;
        assign(xbar_flat__, nil_index_list(), context__.vals_r("xbar"),
          "assigning variable xbar_flat__");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          current_statement__ = 47;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 47;
            assign(xbar,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              xbar_flat__[(pos__ - 1)], "assigning variable xbar");
            current_statement__ = 47;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 48;
      validate_non_negative_index("xsd", "m", m);
      current_statement__ = 49;
      validate_non_negative_index("xsd", "l", l);
      current_statement__ = 50;
      context__.validate_dims("data initialization","xsd","double",
          context__.to_vec(m, l));
      xsd = Eigen::Matrix<double, -1, -1>(m, l);
      stan::math::fill(xsd, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> xsd_flat__;
        current_statement__ = 50;
        assign(xsd_flat__, nil_index_list(), context__.vals_r("xsd"),
          "assigning variable xsd_flat__");
        current_statement__ = 50;
        pos__ = 1;
        current_statement__ = 50;
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          current_statement__ = 50;
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            current_statement__ = 50;
            assign(xsd,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              xsd_flat__[(pos__ - 1)], "assigning variable xsd");
            current_statement__ = 50;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 51;
      context__.validate_dims("data initialization","n_test","int",
          context__.to_vec());
      n_test = std::numeric_limits<int>::min();
      
      current_statement__ = 51;
      n_test = context__.vals_i("n_test")[(1 - 1)];
      current_statement__ = 52;
      validate_non_negative_index("x_test", "n_test", n_test);
      current_statement__ = 53;
      context__.validate_dims("data initialization","x_test","double",
          context__.to_vec(n_test));
      x_test = std::vector<double>(n_test, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 53;
      assign(x_test, nil_index_list(), context__.vals_r("x_test"),
        "assigning variable x_test");
      current_statement__ = 54;
      validate_non_negative_index("y_test", "n_test", n_test);
      current_statement__ = 55;
      context__.validate_dims("data initialization","y_test","int",
          context__.to_vec(n_test));
      y_test = std::vector<int>(n_test, std::numeric_limits<int>::min());
      
      current_statement__ = 55;
      assign(y_test, nil_index_list(), context__.vals_i("y_test"),
        "assigning variable y_test");
      current_statement__ = 56;
      validate_non_negative_index("z_test_counts", "n_test", n_test);
      current_statement__ = 57;
      validate_non_negative_index("z_test_counts", "m", m);
      current_statement__ = 58;
      context__.validate_dims("data initialization","z_test_counts","int",
          context__.to_vec(n_test, m));
      z_test_counts = std::vector<std::vector<int>>(n_test, std::vector<int>(m, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> z_test_counts_flat__;
        current_statement__ = 58;
        assign(z_test_counts_flat__, nil_index_list(),
          context__.vals_i("z_test_counts"),
          "assigning variable z_test_counts_flat__");
        current_statement__ = 58;
        pos__ = 1;
        current_statement__ = 58;
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          current_statement__ = 58;
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            current_statement__ = 58;
            assign(z_test_counts,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              z_test_counts_flat__[(pos__ - 1)],
              "assigning variable z_test_counts");
            current_statement__ = 58;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 59;
      n_each = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 60;
      validate_non_negative_index("ss", "m", m);
      current_statement__ = 61;
      validate_non_negative_index("ss", "l", l);
      current_statement__ = 62;
      ss = Eigen::Matrix<double, -1, -1>(m, l);
      stan::math::fill(ss, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 63;
      assign(ss, nil_index_list(), elt_multiply(subtract(n, 1), xsd),
        "assigning variable ss");
      current_statement__ = 64;
      n_each = max(n);
      current_statement__ = 65;
      validate_non_negative_index("m_0", "m", m);
      current_statement__ = 66;
      validate_non_negative_index("S_0", "m", m);
      current_statement__ = 67;
      validate_non_negative_index("m_n", "m", m);
      current_statement__ = 68;
      validate_non_negative_index("m_n", "l", l);
      current_statement__ = 69;
      validate_non_negative_index("kappa_n", "m", m);
      current_statement__ = 70;
      validate_non_negative_index("kappa_n", "l", l);
      current_statement__ = 71;
      validate_non_negative_index("S_n", "m", m);
      current_statement__ = 72;
      validate_non_negative_index("S_n", "l", l);
      current_statement__ = 73;
      validate_non_negative_index("nu_n", "m", m);
      current_statement__ = 74;
      validate_non_negative_index("nu_n", "l", l);
      current_statement__ = 75;
      validate_non_negative_index("t_scale", "m", m);
      current_statement__ = 76;
      validate_non_negative_index("t_scale", "l", l);
      current_statement__ = 77;
      validate_non_negative_index("p_test_conj", "n_test", n_test);
      current_statement__ = 78;
      validate_non_negative_index("p_test_conj", "m", m);
      current_statement__ = 79;
      validate_non_negative_index("log_p_test_conj", "n_test", n_test);
      current_statement__ = 80;
      validate_non_negative_index("log_p_test_conj", "m", m);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += m;
      num_params_r__ += m;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ kappa_0;
      kappa_0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      kappa_0 = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        kappa_0 = stan::math::lb_constrain(kappa_0, 0, lp__);
      } else {
        current_statement__ = 1;
        kappa_0 = stan::math::lb_constrain(kappa_0, 0);
      }
      local_scalar_t__ nu_0;
      nu_0 = DUMMY_VAR__;
      
      current_statement__ = 2;
      nu_0 = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        nu_0 = stan::math::lb_constrain(nu_0, 0, lp__);
      } else {
        current_statement__ = 2;
        nu_0 = stan::math::lb_constrain(nu_0, 0);
      }
      std::vector<local_scalar_t__> m_0;
      m_0 = std::vector<local_scalar_t__>(m, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 3;
        assign(m_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable m_0");}
      std::vector<local_scalar_t__> S_0;
      S_0 = std::vector<local_scalar_t__>(m, DUMMY_VAR__);
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(S_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable S_0");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(S_0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_0[(sym1__ - 1)], 0, lp__),
            "assigning variable S_0");
        } else {
          current_statement__ = 4;
          assign(S_0, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(S_0[(sym1__ - 1)], 0),
            "assigning variable S_0");
        }}
      local_scalar_t__ lapse_rate;
      lapse_rate = DUMMY_VAR__;
      
      current_statement__ = 5;
      lapse_rate = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        lapse_rate = stan::math::lub_constrain(lapse_rate, 0, 1, lp__);
      } else {
        current_statement__ = 5;
        lapse_rate = stan::math::lub_constrain(lapse_rate, 0, 1);
      }
      std::vector<std::vector<local_scalar_t__>> m_n;
      m_n = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      
      std::vector<std::vector<local_scalar_t__>> kappa_n;
      kappa_n = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      
      std::vector<std::vector<local_scalar_t__>> S_n;
      S_n = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      
      std::vector<std::vector<local_scalar_t__>> nu_n;
      nu_n = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      
      std::vector<std::vector<local_scalar_t__>> t_scale;
      t_scale = std::vector<std::vector<local_scalar_t__>>(m, std::vector<local_scalar_t__>(l, DUMMY_VAR__));
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> p_test_conj;
      p_test_conj = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_test, Eigen::Matrix<local_scalar_t__, -1, 1>(m));
      stan::math::fill(p_test_conj, DUMMY_VAR__);
      
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> log_p_test_conj;
      log_p_test_conj = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(n_test, Eigen::Matrix<local_scalar_t__, -1, 1>(m));
      stan::math::fill(log_p_test_conj, DUMMY_VAR__);
      
      current_statement__ = 21;
      for (int cat = 1; cat <= m; ++cat) {
        current_statement__ = 19;
        for (int group = 1; group <= l; ++group) {
          current_statement__ = 13;
          assign(kappa_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (kappa_0 +
              rvalue(n,
                cons_list(index_uni(cat),
                  cons_list(index_uni(group), nil_index_list())), "n")),
            "assigning variable kappa_n");
          current_statement__ = 14;
          assign(nu_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (nu_0 +
              rvalue(n,
                cons_list(index_uni(cat),
                  cons_list(index_uni(group), nil_index_list())), "n")),
            "assigning variable nu_n");
          current_statement__ = 15;
          assign(m_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (((m_0[(cat - 1)] * kappa_0) +
               (rvalue(xbar,
                  cons_list(index_uni(cat),
                    cons_list(index_uni(group), nil_index_list())), "xbar") *
                 rvalue(n,
                   cons_list(index_uni(cat),
                     cons_list(index_uni(group), nil_index_list())), "n"))) /
              kappa_n[(cat - 1)][(group - 1)]), "assigning variable m_n");
          current_statement__ = 16;
          assign(S_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            stan::math::sqrt(
              ((((nu_0 * pow(S_0[(cat - 1)], 2)) +
                  rvalue(ss,
                    cons_list(index_uni(cat),
                      cons_list(index_uni(group), nil_index_list())), "ss"))
                 +
                 (((rvalue(n,
                      cons_list(index_uni(cat),
                        cons_list(index_uni(group), nil_index_list())), "n")
                     * kappa_0) / kappa_n[(cat - 1)][(group - 1)]) *
                   pow(
                     (m_0[(cat - 1)] -
                       rvalue(xbar,
                         cons_list(index_uni(cat),
                           cons_list(index_uni(group), nil_index_list())),
                         "xbar")), 2))) / nu_n[(cat - 1)][(group - 1)])),
            "assigning variable S_n");
          current_statement__ = 17;
          assign(t_scale,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (S_n[(cat - 1)][(group - 1)] *
              stan::math::sqrt(
                ((kappa_n[(cat - 1)][(group - 1)] + 1) /
                  kappa_n[(cat - 1)][(group - 1)]))),
            "assigning variable t_scale");}}
      current_statement__ = 29;
      for (int j = 1; j <= n_test; ++j) {
        int group;
        group = std::numeric_limits<int>::min();
        
        current_statement__ = 23;
        group = y_test[(j - 1)];
        current_statement__ = 26;
        for (int cat = 1; cat <= m; ++cat) {
          current_statement__ = 24;
          assign(log_p_test_conj,
            cons_list(index_uni(j),
              cons_list(index_uni(cat), nil_index_list())),
            student_t_lpdf<false>(x_test[(j - 1)],
              nu_n[(cat - 1)][(group - 1)], m_n[(cat - 1)][(group - 1)],
              t_scale[(cat - 1)][(group - 1)]),
            "assigning variable log_p_test_conj");}
        current_statement__ = 27;
        assign(p_test_conj, cons_list(index_uni(j), nil_index_list()),
          stan::math::exp(
            subtract(log_p_test_conj[(j - 1)],
              log_sum_exp(log_p_test_conj[(j - 1)]))),
          "assigning variable p_test_conj");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 7;
          current_statement__ = 7;
          check_greater_or_equal(function__, "kappa_n[sym1__, sym2__]",
                                 kappa_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 8;
          current_statement__ = 8;
          check_greater_or_equal(function__, "S_n[sym1__, sym2__]",
                                 S_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 9;
          current_statement__ = 9;
          check_greater_or_equal(function__, "nu_n[sym1__, sym2__]",
                                 nu_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 10;
          current_statement__ = 10;
          check_greater_or_equal(function__, "t_scale[sym1__, sym2__]",
                                 t_scale[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_test; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_simplex(function__, "p_test_conj[sym1__]",
                      p_test_conj[(sym1__ - 1)]);}
      {
        current_statement__ = 30;
        validate_non_negative_index("lapsing_probs", "m", m);
        Eigen::Matrix<local_scalar_t__, -1, 1> lapsing_probs;
        lapsing_probs = Eigen::Matrix<local_scalar_t__, -1, 1>(m);
        stan::math::fill(lapsing_probs, DUMMY_VAR__);
        
        current_statement__ = 32;
        assign(lapsing_probs, nil_index_list(),
          rep_vector((lapse_rate / m), m), "assigning variable lapsing_probs");
        current_statement__ = 33;
        lp_accum__.add(normal_lpdf<propto__>(kappa_0, 0, (n_each * 4)));
        current_statement__ = 34;
        lp_accum__.add(normal_lpdf<propto__>(nu_0, 0, (n_each * 4)));
        current_statement__ = 35;
        lp_accum__.add(normal_lpdf<propto__>(m_0, 0, 100));
        current_statement__ = 36;
        lp_accum__.add(uniform_lpdf<propto__>(S_0, 0, 100));
        current_statement__ = 39;
        for (int i = 1; i <= n_test; ++i) {
          current_statement__ = 37;
          lp_accum__.add(
            multinomial_lpmf<propto__>(z_test_counts[(i - 1)],
              add(multiply(p_test_conj[(i - 1)], (1 - lapse_rate)),
                lapsing_probs)));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kappa_0 = in__.scalar();
      current_statement__ = 1;
      kappa_0 = stan::math::lb_constrain(kappa_0, 0);
      double nu_0;
      nu_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nu_0 = in__.scalar();
      current_statement__ = 2;
      nu_0 = stan::math::lb_constrain(nu_0, 0);
      std::vector<double> m_0;
      m_0 = std::vector<double>(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 3;
        assign(m_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable m_0");}
      std::vector<double> S_0;
      S_0 = std::vector<double>(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(S_0, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable S_0");}
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(S_0, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(S_0[(sym1__ - 1)], 0),
          "assigning variable S_0");}
      double lapse_rate;
      lapse_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lapse_rate = in__.scalar();
      current_statement__ = 5;
      lapse_rate = stan::math::lub_constrain(lapse_rate, 0, 1);
      std::vector<std::vector<double>> m_n;
      m_n = std::vector<std::vector<double>>(m, std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> kappa_n;
      kappa_n = std::vector<std::vector<double>>(m, std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> S_n;
      S_n = std::vector<std::vector<double>>(m, std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> nu_n;
      nu_n = std::vector<std::vector<double>>(m, std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<std::vector<double>> t_scale;
      t_scale = std::vector<std::vector<double>>(m, std::vector<double>(l, std::numeric_limits<double>::quiet_NaN()));
      
      std::vector<Eigen::Matrix<double, -1, 1>> p_test_conj;
      p_test_conj = std::vector<Eigen::Matrix<double, -1, 1>>(n_test, Eigen::Matrix<double, -1, 1>(m));
      stan::math::fill(p_test_conj, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<Eigen::Matrix<double, -1, 1>> log_p_test_conj;
      log_p_test_conj = std::vector<Eigen::Matrix<double, -1, 1>>(n_test, Eigen::Matrix<double, -1, 1>(m));
      stan::math::fill(log_p_test_conj, std::numeric_limits<double>::quiet_NaN());
      
      vars__.emplace_back(kappa_0);
      vars__.emplace_back(nu_0);
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(m_0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(S_0[(sym1__ - 1)]);}
      vars__.emplace_back(lapse_rate);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      for (int cat = 1; cat <= m; ++cat) {
        current_statement__ = 19;
        for (int group = 1; group <= l; ++group) {
          current_statement__ = 13;
          assign(kappa_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (kappa_0 +
              rvalue(n,
                cons_list(index_uni(cat),
                  cons_list(index_uni(group), nil_index_list())), "n")),
            "assigning variable kappa_n");
          current_statement__ = 14;
          assign(nu_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (nu_0 +
              rvalue(n,
                cons_list(index_uni(cat),
                  cons_list(index_uni(group), nil_index_list())), "n")),
            "assigning variable nu_n");
          current_statement__ = 15;
          assign(m_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (((m_0[(cat - 1)] * kappa_0) +
               (rvalue(xbar,
                  cons_list(index_uni(cat),
                    cons_list(index_uni(group), nil_index_list())), "xbar") *
                 rvalue(n,
                   cons_list(index_uni(cat),
                     cons_list(index_uni(group), nil_index_list())), "n"))) /
              kappa_n[(cat - 1)][(group - 1)]), "assigning variable m_n");
          current_statement__ = 16;
          assign(S_n,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            stan::math::sqrt(
              ((((nu_0 * pow(S_0[(cat - 1)], 2)) +
                  rvalue(ss,
                    cons_list(index_uni(cat),
                      cons_list(index_uni(group), nil_index_list())), "ss"))
                 +
                 (((rvalue(n,
                      cons_list(index_uni(cat),
                        cons_list(index_uni(group), nil_index_list())), "n")
                     * kappa_0) / kappa_n[(cat - 1)][(group - 1)]) *
                   pow(
                     (m_0[(cat - 1)] -
                       rvalue(xbar,
                         cons_list(index_uni(cat),
                           cons_list(index_uni(group), nil_index_list())),
                         "xbar")), 2))) / nu_n[(cat - 1)][(group - 1)])),
            "assigning variable S_n");
          current_statement__ = 17;
          assign(t_scale,
            cons_list(index_uni(cat),
              cons_list(index_uni(group), nil_index_list())),
            (S_n[(cat - 1)][(group - 1)] *
              stan::math::sqrt(
                ((kappa_n[(cat - 1)][(group - 1)] + 1) /
                  kappa_n[(cat - 1)][(group - 1)]))),
            "assigning variable t_scale");}}
      current_statement__ = 29;
      for (int j = 1; j <= n_test; ++j) {
        int group;
        group = std::numeric_limits<int>::min();
        
        current_statement__ = 23;
        group = y_test[(j - 1)];
        current_statement__ = 26;
        for (int cat = 1; cat <= m; ++cat) {
          current_statement__ = 24;
          assign(log_p_test_conj,
            cons_list(index_uni(j),
              cons_list(index_uni(cat), nil_index_list())),
            student_t_lpdf<false>(x_test[(j - 1)],
              nu_n[(cat - 1)][(group - 1)], m_n[(cat - 1)][(group - 1)],
              t_scale[(cat - 1)][(group - 1)]),
            "assigning variable log_p_test_conj");}
        current_statement__ = 27;
        assign(p_test_conj, cons_list(index_uni(j), nil_index_list()),
          stan::math::exp(
            subtract(log_p_test_conj[(j - 1)],
              log_sum_exp(log_p_test_conj[(j - 1)]))),
          "assigning variable p_test_conj");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 7;
          current_statement__ = 7;
          check_greater_or_equal(function__, "kappa_n[sym1__, sym2__]",
                                 kappa_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 8;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 8;
          current_statement__ = 8;
          check_greater_or_equal(function__, "S_n[sym1__, sym2__]",
                                 S_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 9;
          current_statement__ = 9;
          check_greater_or_equal(function__, "nu_n[sym1__, sym2__]",
                                 nu_n[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= l; ++sym2__) {
          current_statement__ = 10;
          current_statement__ = 10;
          check_greater_or_equal(function__, "t_scale[sym1__, sym2__]",
                                 t_scale[(sym1__ - 1)][(sym2__ - 1)], 0);}}
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= n_test; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_simplex(function__, "p_test_conj[sym1__]",
                      p_test_conj[(sym1__ - 1)]);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(m_n[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(kappa_n[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(S_n[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(nu_n[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            vars__.emplace_back(t_scale[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            vars__.emplace_back(p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);}}
        for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            vars__.emplace_back(log_p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);
          }}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double kappa_0;
      kappa_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kappa_0 = context__.vals_r("kappa_0")[(1 - 1)];
      double kappa_0_free__;
      kappa_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      kappa_0_free__ = stan::math::lb_free(kappa_0, 0);
      double nu_0;
      nu_0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nu_0 = context__.vals_r("nu_0")[(1 - 1)];
      double nu_0_free__;
      nu_0_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      nu_0_free__ = stan::math::lb_free(nu_0, 0);
      std::vector<double> m_0;
      m_0 = std::vector<double>(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(m_0, nil_index_list(), context__.vals_r("m_0"),
        "assigning variable m_0");
      std::vector<double> S_0;
      S_0 = std::vector<double>(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      assign(S_0, nil_index_list(), context__.vals_r("S_0"),
        "assigning variable S_0");
      std::vector<double> S_0_free__;
      S_0_free__ = std::vector<double>(m, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        current_statement__ = 4;
        assign(S_0_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(S_0[(sym1__ - 1)], 0),
          "assigning variable S_0_free__");}
      double lapse_rate;
      lapse_rate = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lapse_rate = context__.vals_r("lapse_rate")[(1 - 1)];
      double lapse_rate_free__;
      lapse_rate_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      lapse_rate_free__ = stan::math::lub_free(lapse_rate, 0, 1);
      vars__.emplace_back(kappa_0_free__);
      vars__.emplace_back(nu_0_free__);
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(m_0[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        vars__.emplace_back(S_0_free__[(sym1__ - 1)]);}
      vars__.emplace_back(lapse_rate_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("kappa_0");
    names__.emplace_back("nu_0");
    names__.emplace_back("m_0");
    names__.emplace_back("S_0");
    names__.emplace_back("lapse_rate");
    names__.emplace_back("m_n");
    names__.emplace_back("kappa_n");
    names__.emplace_back("S_n");
    names__.emplace_back("nu_n");
    names__.emplace_back("t_scale");
    names__.emplace_back("p_test_conj");
    names__.emplace_back("log_p_test_conj");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m),
                                             static_cast<size_t>(l)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m),
                                             static_cast<size_t>(l)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m),
                                             static_cast<size_t>(l)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m),
                                             static_cast<size_t>(l)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(m),
                                             static_cast<size_t>(l)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_test),
                                             static_cast<size_t>(m)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(n_test),
                                             static_cast<size_t>(m)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_0" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "lapse_rate");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "m_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "kappa_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "t_scale" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p_test_conj" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_p_test_conj" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "m_0" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "S_0" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "lapse_rate");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "m_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "kappa_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "S_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "nu_n" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= l; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= m; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "t_scale" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= (m - 1); ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "p_test_conj" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= m; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n_test; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "log_p_test_conj" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S_0\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" << n_test << ",\"element_type\":{\"name\":\"vector\",\"length\":" << m << "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" << n_test << ",\"element_type\":{\"name\":\"vector\",\"length\":" << m << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S_0\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" << m << ",\"element_type\":{\"name\":\"array\",\"length\":" << l << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" << n_test << ",\"element_type\":{\"name\":\"vector\",\"length\":" << (m - 1) << "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" << n_test << ",\"element_type\":{\"name\":\"vector\",\"length\":" << m << "}},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::model_uvg_conj_uninformative_priors_sufficient_stats_lapse;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_uvg_conj_uninformative_priors_sufficient_stats_lapse_namespace::profiles__;
}
#endif
#endif
