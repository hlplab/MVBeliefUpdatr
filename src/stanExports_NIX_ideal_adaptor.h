// Generated by rstantools.  Do not edit by hand.

/*
    MVbeliefupdatr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MVbeliefupdatr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MVbeliefupdatr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.36.0-91-ge511e97
#include <stan/model/model_header.hpp>
namespace model_NIX_ideal_adaptor_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 81> locations_array__ =
  {" (found before start of program)",
  " (in 'NIX_ideal_adaptor', line 38, column 2 to column 24)",
  " (in 'NIX_ideal_adaptor', line 39, column 2 to column 21)",
  " (in 'NIX_ideal_adaptor', line 40, column 2 to column 20)",
  " (in 'NIX_ideal_adaptor', line 41, column 2 to column 29)",
  " (in 'NIX_ideal_adaptor', line 42, column 2 to column 36)",
  " (in 'NIX_ideal_adaptor', line 46, column 2 to column 22)",
  " (in 'NIX_ideal_adaptor', line 47, column 2 to column 35)",
  " (in 'NIX_ideal_adaptor', line 48, column 2 to column 31)",
  " (in 'NIX_ideal_adaptor', line 49, column 2 to column 32)",
  " (in 'NIX_ideal_adaptor', line 50, column 2 to column 35)",
  " (in 'NIX_ideal_adaptor', line 54, column 2 to column 58)",
  " (in 'NIX_ideal_adaptor', line 55, column 2 to column 39)",
  " (in 'NIX_ideal_adaptor', line 56, column 2 to column 42)",
  " (in 'NIX_ideal_adaptor', line 61, column 6 to column 59)",
  " (in 'NIX_ideal_adaptor', line 62, column 6 to column 53)",
  " (in 'NIX_ideal_adaptor', line 63, column 6 to column 118)",
  " (in 'NIX_ideal_adaptor', line 64, column 6 to line 69, column 49)",
  " (in 'NIX_ideal_adaptor', line 70, column 6 to column 96)",
  " (in 'NIX_ideal_adaptor', line 60, column 23 to line 71, column 5)",
  " (in 'NIX_ideal_adaptor', line 60, column 4 to line 71, column 5)",
  " (in 'NIX_ideal_adaptor', line 59, column 19 to line 72, column 3)",
  " (in 'NIX_ideal_adaptor', line 59, column 2 to line 72, column 3)",
  " (in 'NIX_ideal_adaptor', line 75, column 4 to column 14)",
  " (in 'NIX_ideal_adaptor', line 76, column 4 to column 22)",
  " (in 'NIX_ideal_adaptor', line 79, column 6 to line 82, column 66)",
  " (in 'NIX_ideal_adaptor', line 78, column 21 to line 83, column 5)",
  " (in 'NIX_ideal_adaptor', line 78, column 4 to line 83, column 5)",
  " (in 'NIX_ideal_adaptor', line 85, column 4 to column 79)",
  " (in 'NIX_ideal_adaptor', line 74, column 22 to line 86, column 3)",
  " (in 'NIX_ideal_adaptor', line 74, column 2 to line 86, column 3)",
  " (in 'NIX_ideal_adaptor', line 89, column 2 to column 37)",
  " (in 'NIX_ideal_adaptor', line 90, column 2 to column 34)",
  " (in 'NIX_ideal_adaptor', line 91, column 2 to column 23)",
  " (in 'NIX_ideal_adaptor', line 92, column 2 to column 24)",
  " (in 'NIX_ideal_adaptor', line 94, column 4 to column 84)",
  " (in 'NIX_ideal_adaptor', line 93, column 22 to line 95, column 3)",
  " (in 'NIX_ideal_adaptor', line 93, column 2 to line 95, column 3)",
  " (in 'NIX_ideal_adaptor', line 16, column 2 to column 8)",
  " (in 'NIX_ideal_adaptor', line 17, column 2 to column 8)",
  " (in 'NIX_ideal_adaptor', line 18, column 9 to column 10)",
  " (in 'NIX_ideal_adaptor', line 18, column 11 to column 12)",
  " (in 'NIX_ideal_adaptor', line 18, column 2 to column 25)",
  " (in 'NIX_ideal_adaptor', line 19, column 9 to column 10)",
  " (in 'NIX_ideal_adaptor', line 19, column 11 to column 12)",
  " (in 'NIX_ideal_adaptor', line 19, column 2 to column 30)",
  " (in 'NIX_ideal_adaptor', line 20, column 9 to column 10)",
  " (in 'NIX_ideal_adaptor', line 20, column 11 to column 12)",
  " (in 'NIX_ideal_adaptor', line 20, column 2 to column 28)",
  " (in 'NIX_ideal_adaptor', line 21, column 2 to column 13)",
  " (in 'NIX_ideal_adaptor', line 22, column 8 to column 14)",
  " (in 'NIX_ideal_adaptor', line 22, column 2 to column 28)",
  " (in 'NIX_ideal_adaptor', line 23, column 8 to column 14)",
  " (in 'NIX_ideal_adaptor', line 23, column 2 to column 27)",
  " (in 'NIX_ideal_adaptor', line 24, column 8 to column 14)",
  " (in 'NIX_ideal_adaptor', line 24, column 15 to column 16)",
  " (in 'NIX_ideal_adaptor', line 24, column 2 to column 36)",
  " (in 'NIX_ideal_adaptor', line 26, column 2 to column 41)",
  " (in 'NIX_ideal_adaptor', line 27, column 2 to column 35)",
  " (in 'NIX_ideal_adaptor', line 28, column 2 to column 38)",
  " (in 'NIX_ideal_adaptor', line 33, column 9 to column 10)",
  " (in 'NIX_ideal_adaptor', line 33, column 11 to column 12)",
  " (in 'NIX_ideal_adaptor', line 33, column 2 to column 64)",
  " (in 'NIX_ideal_adaptor', line 34, column 2 to column 66)",
  " (in 'NIX_ideal_adaptor', line 40, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 41, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 46, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 46, column 10 to column 11)",
  " (in 'NIX_ideal_adaptor', line 47, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 47, column 10 to column 11)",
  " (in 'NIX_ideal_adaptor', line 48, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 48, column 10 to column 11)",
  " (in 'NIX_ideal_adaptor', line 49, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 49, column 10 to column 11)",
  " (in 'NIX_ideal_adaptor', line 50, column 8 to column 9)",
  " (in 'NIX_ideal_adaptor', line 50, column 10 to column 11)",
  " (in 'NIX_ideal_adaptor', line 54, column 9 to column 10)",
  " (in 'NIX_ideal_adaptor', line 55, column 8 to column 14)",
  " (in 'NIX_ideal_adaptor', line 55, column 24 to column 25)",
  " (in 'NIX_ideal_adaptor', line 56, column 8 to column 14)",
  " (in 'NIX_ideal_adaptor', line 56, column 23 to column 24)"};
#include <stan_meta_header.hpp>
class model_NIX_ideal_adaptor final : public model_base_crtp<model_NIX_ideal_adaptor> {
private:
  int M;
  int L;
  Eigen::Matrix<double,-1,-1> N_exposure_data__;
  Eigen::Matrix<double,-1,-1> x_mean_exposure_data__;
  Eigen::Matrix<double,-1,-1> x_sd_exposure_data__;
  int N_test;
  std::vector<double> x_test;
  std::vector<int> y_test;
  std::vector<std::vector<int>> z_test_counts;
  int lapse_rate_known;
  int mu_0_known;
  int Sigma_0_known;
  Eigen::Matrix<double,-1,-1> x_ss_exposure_data__;
  double sigma_kappanu;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> N_exposure{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_mean_exposure{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_sd_exposure{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> x_ss_exposure{nullptr, 0, 0};
public:
  ~model_NIX_ideal_adaptor() {}
  model_NIX_ideal_adaptor(stan::io::var_context& context__, unsigned int
                          random_seed__ = 0, std::ostream*
                          pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_NIX_ideal_adaptor_namespace::model_NIX_ideal_adaptor";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 38;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 38;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 39;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 39;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 40;
      stan::math::validate_non_negative_index("N_exposure", "M", M);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("N_exposure", "L", L);
      current_statement__ = 42;
      context__.validate_dims("data initialization", "N_exposure", "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L)});
      N_exposure_data__ = Eigen::Matrix<double,-1,-1>::Constant(M, L,
                            std::numeric_limits<double>::quiet_NaN());
      new (&N_exposure)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(N_exposure_data__.data(), M,
        L);
      {
        std::vector<local_scalar_t__> N_exposure_flat__;
        current_statement__ = 42;
        N_exposure_flat__ = context__.vals_r("N_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(N_exposure, N_exposure_flat__[(pos__ - 1)],
              "assigning variable N_exposure",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 43;
      stan::math::validate_non_negative_index("x_mean_exposure", "M", M);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("x_mean_exposure", "L", L);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "x_mean_exposure",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L)});
      x_mean_exposure_data__ = Eigen::Matrix<double,-1,-1>::Constant(M, L,
                                 std::numeric_limits<double>::quiet_NaN());
      new (&x_mean_exposure)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_mean_exposure_data__.data(),
        M, L);
      {
        std::vector<local_scalar_t__> x_mean_exposure_flat__;
        current_statement__ = 45;
        x_mean_exposure_flat__ = context__.vals_r("x_mean_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(x_mean_exposure,
              x_mean_exposure_flat__[(pos__ - 1)],
              "assigning variable x_mean_exposure",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 46;
      stan::math::validate_non_negative_index("x_sd_exposure", "M", M);
      current_statement__ = 47;
      stan::math::validate_non_negative_index("x_sd_exposure", "L", L);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "x_sd_exposure",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L)});
      x_sd_exposure_data__ = Eigen::Matrix<double,-1,-1>::Constant(M, L,
                               std::numeric_limits<double>::quiet_NaN());
      new (&x_sd_exposure)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_sd_exposure_data__.data(),
        M, L);
      {
        std::vector<local_scalar_t__> x_sd_exposure_flat__;
        current_statement__ = 48;
        x_sd_exposure_flat__ = context__.vals_r("x_sd_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(x_sd_exposure, x_sd_exposure_flat__[(pos__ -
              1)], "assigning variable x_sd_exposure",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 49;
      context__.validate_dims("data initialization", "N_test", "int",
        std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      current_statement__ = 49;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 50;
      stan::math::validate_non_negative_index("x_test", "N_test", N_test);
      current_statement__ = 51;
      context__.validate_dims("data initialization", "x_test", "double",
        std::vector<size_t>{static_cast<size_t>(N_test)});
      x_test = std::vector<double>(N_test,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 51;
      x_test = context__.vals_r("x_test");
      current_statement__ = 52;
      stan::math::validate_non_negative_index("y_test", "N_test", N_test);
      current_statement__ = 53;
      context__.validate_dims("data initialization", "y_test", "int",
        std::vector<size_t>{static_cast<size_t>(N_test)});
      y_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      current_statement__ = 53;
      y_test = context__.vals_i("y_test");
      current_statement__ = 54;
      stan::math::validate_non_negative_index("z_test_counts", "N_test",
        N_test);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("z_test_counts", "M", M);
      current_statement__ = 56;
      context__.validate_dims("data initialization", "z_test_counts", "int",
        std::vector<size_t>{static_cast<size_t>(N_test),
          static_cast<size_t>(M)});
      z_test_counts = std::vector<std::vector<int>>(N_test,
                        std::vector<int>(M, std::numeric_limits<int>::min()));
      {
        std::vector<int> z_test_counts_flat__;
        current_statement__ = 56;
        z_test_counts_flat__ = context__.vals_i("z_test_counts");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            stan::model::assign(z_test_counts, z_test_counts_flat__[(pos__ -
              1)], "assigning variable z_test_counts",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 57;
      context__.validate_dims("data initialization", "lapse_rate_known",
        "int", std::vector<size_t>{});
      lapse_rate_known = std::numeric_limits<int>::min();
      current_statement__ = 57;
      lapse_rate_known = context__.vals_i("lapse_rate_known")[(1 - 1)];
      current_statement__ = 57;
      stan::math::check_greater_or_equal(function__, "lapse_rate_known",
        lapse_rate_known, 0);
      current_statement__ = 57;
      stan::math::check_less_or_equal(function__, "lapse_rate_known",
        lapse_rate_known, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization", "mu_0_known", "int",
        std::vector<size_t>{});
      mu_0_known = std::numeric_limits<int>::min();
      current_statement__ = 58;
      mu_0_known = context__.vals_i("mu_0_known")[(1 - 1)];
      current_statement__ = 58;
      stan::math::check_greater_or_equal(function__, "mu_0_known",
        mu_0_known, 0);
      current_statement__ = 58;
      stan::math::check_less_or_equal(function__, "mu_0_known", mu_0_known, 1);
      current_statement__ = 59;
      context__.validate_dims("data initialization", "Sigma_0_known", "int",
        std::vector<size_t>{});
      Sigma_0_known = std::numeric_limits<int>::min();
      current_statement__ = 59;
      Sigma_0_known = context__.vals_i("Sigma_0_known")[(1 - 1)];
      current_statement__ = 59;
      stan::math::check_greater_or_equal(function__, "Sigma_0_known",
        Sigma_0_known, 0);
      current_statement__ = 59;
      stan::math::check_less_or_equal(function__, "Sigma_0_known",
        Sigma_0_known, 1);
      current_statement__ = 60;
      stan::math::validate_non_negative_index("x_ss_exposure", "M", M);
      current_statement__ = 61;
      stan::math::validate_non_negative_index("x_ss_exposure", "L", L);
      current_statement__ = 62;
      x_ss_exposure_data__ = Eigen::Matrix<double,-1,-1>::Constant(M, L,
                               std::numeric_limits<double>::quiet_NaN());
      new (&x_ss_exposure)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(x_ss_exposure_data__.data(),
        M, L);
      current_statement__ = 62;
      stan::model::assign(x_ss_exposure,
        stan::math::elt_multiply(stan::math::subtract(N_exposure, 1),
          x_sd_exposure), "assigning variable x_ss_exposure");
      current_statement__ = 63;
      sigma_kappanu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 63;
      sigma_kappanu = stan::math::max(
                        stan::math::to_array_1d(
                          stan::math::elt_multiply(N_exposure, 4)));
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "sigma_kappanu",
        sigma_kappanu, 0);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("m_0", "M", M);
      current_statement__ = 65;
      stan::math::validate_non_negative_index("S_0", "M", M);
      current_statement__ = 66;
      stan::math::validate_non_negative_index("m_n", "M", M);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("m_n", "L", L);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("kappa_n", "M", M);
      current_statement__ = 69;
      stan::math::validate_non_negative_index("kappa_n", "L", L);
      current_statement__ = 70;
      stan::math::validate_non_negative_index("S_n", "M", M);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("S_n", "L", L);
      current_statement__ = 72;
      stan::math::validate_non_negative_index("nu_n", "M", M);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("nu_n", "L", L);
      current_statement__ = 74;
      stan::math::validate_non_negative_index("t_scale", "M", M);
      current_statement__ = 75;
      stan::math::validate_non_negative_index("t_scale", "L", L);
      current_statement__ = 76;
      stan::math::validate_non_negative_index("lapsing_probs", "M", M);
      current_statement__ = 77;
      stan::math::validate_non_negative_index("p_test_conj", "N_test", N_test);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("p_test_conj", "M", M);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("log_p_test_conj", "N_test",
        N_test);
      current_statement__ = 80;
      stan::math::validate_non_negative_index("log_p_test_conj", "M", M);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + M + M + 1;
  }
  inline std::string model_name() const final {
    return "model_NIX_ideal_adaptor";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.36.0-91-ge511e97",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_NIX_ideal_adaptor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto m_0 = in__.template read<std::vector<local_scalar_t__>>(M);
      current_statement__ = 4;
      auto S_0 =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 5;
      auto lapse_rate =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      std::vector<std::vector<local_scalar_t__>> m_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> kappa_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> S_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> nu_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> t_scale =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> lapsing_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      current_statement__ = 22;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 20;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 14;
          stan::model::assign(kappa_n, (kappa_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable kappa_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 15;
          stan::model::assign(nu_n, (nu_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable nu_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 16;
          stan::model::assign(m_n,
            (((stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)) *
            kappa_0) +
            (stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
               stan::model::index_uni(cat), stan::model::index_uni(group)) *
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group)))) /
            stan::model::rvalue(kappa_n, "kappa_n",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable m_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 17;
          stan::model::assign(S_n,
            stan::math::sqrt(((((nu_0 *
              stan::math::pow(
                stan::model::rvalue(S_0, "S_0", stan::model::index_uni(cat)),
                2)) +
              stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              +
              (((stan::model::rvalue(N_exposure, "N_exposure",
                   stan::model::index_uni(cat), stan::model::index_uni(group))
              * kappa_0) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              *
              stan::math::pow(
                (stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat))
                -
                stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
                2))) /
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)))), "assigning variable S_n",
            stan::model::index_uni(cat), stan::model::index_uni(group));
          current_statement__ = 18;
          stan::model::assign(t_scale,
            (stan::model::rvalue(S_n, "S_n", stan::model::index_uni(cat),
               stan::model::index_uni(group)) *
            stan::math::sqrt(
              ((stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))
              + 1) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 30;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 24;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 27;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 25;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 28;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "S_n", S_n, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "t_scale", t_scale, 0);
      current_statement__ = 12;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      {
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(kappa_0, 0,
                         sigma_kappanu));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(nu_0, 0,
                         sigma_kappanu));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(m_0, 0, 100));
        current_statement__ = 34;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(S_0, 0, 100));
        current_statement__ = 37;
        for (int i = 1; i <= N_test; ++i) {
          current_statement__ = 35;
          lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                           stan::model::rvalue(z_test_counts,
                             "z_test_counts", stan::model::index_uni(i)),
                           stan::math::add(
                             stan::math::multiply(
                               stan::model::rvalue(p_test_conj,
                                 "p_test_conj", stan::model::index_uni(i)),
                               (1 - lapse_rate)), lapsing_probs)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_NIX_ideal_adaptor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto m_0 = in__.template read<std::vector<local_scalar_t__>>(M);
      current_statement__ = 4;
      auto S_0 =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 5;
      auto lapse_rate =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      std::vector<std::vector<local_scalar_t__>> m_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> kappa_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> S_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> nu_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> t_scale =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      Eigen::Matrix<local_scalar_t__,-1,1> lapsing_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 11;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      current_statement__ = 22;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 20;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 14;
          stan::model::assign(kappa_n, (kappa_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable kappa_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 15;
          stan::model::assign(nu_n, (nu_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable nu_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 16;
          stan::model::assign(m_n,
            (((stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)) *
            kappa_0) +
            (stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
               stan::model::index_uni(cat), stan::model::index_uni(group)) *
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group)))) /
            stan::model::rvalue(kappa_n, "kappa_n",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable m_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 17;
          stan::model::assign(S_n,
            stan::math::sqrt(((((nu_0 *
              stan::math::pow(
                stan::model::rvalue(S_0, "S_0", stan::model::index_uni(cat)),
                2)) +
              stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              +
              (((stan::model::rvalue(N_exposure, "N_exposure",
                   stan::model::index_uni(cat), stan::model::index_uni(group))
              * kappa_0) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              *
              stan::math::pow(
                (stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat))
                -
                stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
                2))) /
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)))), "assigning variable S_n",
            stan::model::index_uni(cat), stan::model::index_uni(group));
          current_statement__ = 18;
          stan::model::assign(t_scale,
            (stan::model::rvalue(S_n, "S_n", stan::model::index_uni(cat),
               stan::model::index_uni(group)) *
            stan::math::sqrt(
              ((stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))
              + 1) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 30;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 24;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 27;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 25;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 28;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "S_n", S_n, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "t_scale", t_scale, 0);
      current_statement__ = 12;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      {
        current_statement__ = 31;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(kappa_0, 0,
                         sigma_kappanu));
        current_statement__ = 32;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(nu_0, 0,
                         sigma_kappanu));
        current_statement__ = 33;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(m_0, 0, 100));
        current_statement__ = 34;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(S_0, 0, 100));
        current_statement__ = 37;
        for (int i = 1; i <= N_test; ++i) {
          current_statement__ = 35;
          lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                           stan::model::rvalue(z_test_counts,
                             "z_test_counts", stan::model::index_uni(i)),
                           stan::math::add(
                             stan::math::multiply(
                               stan::model::rvalue(p_test_conj,
                                 "p_test_conj", stan::model::index_uni(i)),
                               (1 - lapse_rate)), lapsing_probs)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_NIX_ideal_adaptor_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(0,
          lp__);
      current_statement__ = 3;
      auto m_0 = in__.template read<std::vector<local_scalar_t__>>(M);
      current_statement__ = 4;
      auto S_0 =
        in__.template read_constrain_lb<std::vector<local_scalar_t__>,
          jacobian__>(0, lp__, M);
      current_statement__ = 5;
      auto lapse_rate =
        in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0, 1,
          lp__);
      std::vector<std::vector<double>> m_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> kappa_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> S_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> nu_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> t_scale =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      Eigen::Matrix<double,-1,1> lapsing_probs =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<double,-1,1>>(N_test,
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<double,-1,1>>(N_test,
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(kappa_0);
      out__.write(nu_0);
      out__.write(m_0);
      out__.write(S_0);
      out__.write(lapse_rate);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 11;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      current_statement__ = 22;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 20;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 14;
          stan::model::assign(kappa_n, (kappa_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable kappa_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 15;
          stan::model::assign(nu_n, (nu_0 +
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable nu_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 16;
          stan::model::assign(m_n,
            (((stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)) *
            kappa_0) +
            (stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
               stan::model::index_uni(cat), stan::model::index_uni(group)) *
            stan::model::rvalue(N_exposure, "N_exposure",
              stan::model::index_uni(cat), stan::model::index_uni(group)))) /
            stan::model::rvalue(kappa_n, "kappa_n",
              stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable m_n", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 17;
          stan::model::assign(S_n,
            stan::math::sqrt(((((nu_0 *
              stan::math::pow(
                stan::model::rvalue(S_0, "S_0", stan::model::index_uni(cat)),
                2)) +
              stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              +
              (((stan::model::rvalue(N_exposure, "N_exposure",
                   stan::model::index_uni(cat), stan::model::index_uni(group))
              * kappa_0) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)))
              *
              stan::math::pow(
                (stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat))
                -
                stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
                2))) /
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)))), "assigning variable S_n",
            stan::model::index_uni(cat), stan::model::index_uni(group));
          current_statement__ = 18;
          stan::model::assign(t_scale,
            (stan::model::rvalue(S_n, "S_n", stan::model::index_uni(cat),
               stan::model::index_uni(group)) *
            stan::math::sqrt(
              ((stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))
              + 1) /
              stan::model::rvalue(kappa_n, "kappa_n",
                stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 30;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 24;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 27;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 25;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 28;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, 0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "S_n", S_n, 0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, 0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "t_scale", t_scale, 0);
      current_statement__ = 12;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      if (emit_transformed_parameters__) {
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(m_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(kappa_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(S_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(nu_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(t_scale[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(lapsing_probs);
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            out__.write(p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            out__.write(log_p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ kappa_0 = DUMMY_VAR__;
      current_statement__ = 1;
      kappa_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, kappa_0);
      local_scalar_t__ nu_0 = DUMMY_VAR__;
      current_statement__ = 2;
      nu_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, nu_0);
      std::vector<local_scalar_t__> m_0 =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(m_0, in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable m_0");
      out__.write(m_0);
      std::vector<local_scalar_t__> S_0 =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(S_0, in__.read<std::vector<local_scalar_t__>>(M),
        "assigning variable S_0");
      out__.write_free_lb(0, S_0);
      local_scalar_t__ lapse_rate = DUMMY_VAR__;
      current_statement__ = 5;
      lapse_rate = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 1, lapse_rate);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "kappa_0",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "nu_0", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "m_0", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "S_0", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "lapse_rate",
        "double", std::vector<size_t>{});
      local_scalar_t__ kappa_0 = DUMMY_VAR__;
      current_statement__ = 1;
      kappa_0 = context__.vals_r("kappa_0")[(1 - 1)];
      out__.write_free_lb(0, kappa_0);
      local_scalar_t__ nu_0 = DUMMY_VAR__;
      current_statement__ = 2;
      nu_0 = context__.vals_r("nu_0")[(1 - 1)];
      out__.write_free_lb(0, nu_0);
      std::vector<local_scalar_t__> m_0 =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 3;
      m_0 = context__.vals_r("m_0");
      out__.write(m_0);
      std::vector<local_scalar_t__> S_0 =
        std::vector<local_scalar_t__>(M, DUMMY_VAR__);
      current_statement__ = 4;
      S_0 = context__.vals_r("S_0");
      out__.write_free_lb(0, S_0);
      local_scalar_t__ lapse_rate = DUMMY_VAR__;
      current_statement__ = 5;
      lapse_rate = context__.vals_r("lapse_rate")[(1 - 1)];
      out__.write_free_lub(0, 1, lapse_rate);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"kappa_0", "nu_0", "m_0", "S_0",
                "lapse_rate"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"m_n", "kappa_n", "S_n", "nu_n", "t_scale", "lapsing_probs",
             "p_test_conj", "log_p_test_conj"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{static_cast<size_t>(M)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N_test),
               static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N_test),
               static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "m_0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "S_0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "lapse_rate");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "kappa_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "S_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "t_scale" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "lapsing_probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_test_conj" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_p_test_conj" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "m_0" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
      param_names__.emplace_back(std::string() + "S_0" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "lapse_rate");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "kappa_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "S_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "t_scale" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "lapsing_probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_test_conj" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_p_test_conj" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"lapsing_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"S_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"S_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"lapsing_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((M -1)) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + M) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((M *
      L) + (M * L)) + (M * L)) + (M * L)) + (M * L)) + M) + (N_test * M)) +
      (N_test * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((1 + 1) + M) + M) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((((M *
      L) + (M * L)) + (M * L)) + (M * L)) + (M * L)) + M) + (N_test * M)) +
      (N_test * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_NIX_ideal_adaptor_namespace::model_NIX_ideal_adaptor;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_NIX_ideal_adaptor_namespace::profiles__;
}
#endif
#endif
