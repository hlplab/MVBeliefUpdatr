// Generated by rstantools.  Do not edit by hand.

/*
    MVbeliefupdatr is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MVbeliefupdatr is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MVbeliefupdatr.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.37.0-rc1
#include <stan/model/model_header.hpp>
namespace model_MNIX_ideal_adaptor_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 210> locations_array__ =
  {" (found before start of program)",
  " (in 'MNIX_ideal_adaptor', line 89, column 2 to column 24)",
  " (in 'MNIX_ideal_adaptor', line 90, column 2 to column 23)",
  " (in 'MNIX_ideal_adaptor', line 92, column 2 to column 74)",
  " (in 'MNIX_ideal_adaptor', line 93, column 2 to column 48)",
  " (in 'MNIX_ideal_adaptor', line 94, column 2 to column 46)",
  " (in 'MNIX_ideal_adaptor', line 95, column 2 to column 62)",
  " (in 'MNIX_ideal_adaptor', line 98, column 2 to column 62)",
  " (in 'MNIX_ideal_adaptor', line 99, column 2 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 101, column 2 to column 80)",
  " (in 'MNIX_ideal_adaptor', line 105, column 2 to column 58)",
  " (in 'MNIX_ideal_adaptor', line 107, column 2 to column 35)",
  " (in 'MNIX_ideal_adaptor', line 108, column 2 to column 32)",
  " (in 'MNIX_ideal_adaptor', line 109, column 2 to column 27)",
  " (in 'MNIX_ideal_adaptor', line 110, column 2 to column 29)",
  " (in 'MNIX_ideal_adaptor', line 111, column 2 to column 31)",
  " (in 'MNIX_ideal_adaptor', line 112, column 2 to column 34)",
  " (in 'MNIX_ideal_adaptor', line 113, column 2 to column 39)",
  " (in 'MNIX_ideal_adaptor', line 114, column 2 to column 42)",
  " (in 'MNIX_ideal_adaptor', line 219, column 2 to column 23)",
  " (in 'MNIX_ideal_adaptor', line 220, column 2 to column 25)",
  " (in 'MNIX_ideal_adaptor', line 226, column 2 to column 91)",
  " (in 'MNIX_ideal_adaptor', line 239, column 2 to column 34)",
  " (in 'MNIX_ideal_adaptor', line 240, column 2 to column 34)",
  " (in 'MNIX_ideal_adaptor', line 241, column 2 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 242, column 2 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 121, column 4 to column 93)",
  " (in 'MNIX_ideal_adaptor', line 137, column 8 to column 37)",
  " (in 'MNIX_ideal_adaptor', line 138, column 8 to column 31)",
  " (in 'MNIX_ideal_adaptor', line 139, column 8 to column 34)",
  " (in 'MNIX_ideal_adaptor', line 140, column 8 to column 38)",
  " (in 'MNIX_ideal_adaptor', line 136, column 13 to line 141, column 7)",
  " (in 'MNIX_ideal_adaptor', line 124, column 8 to column 61)",
  " (in 'MNIX_ideal_adaptor', line 125, column 8 to column 55)",
  " (in 'MNIX_ideal_adaptor', line 126, column 8 to line 128, column 29)",
  " (in 'MNIX_ideal_adaptor', line 129, column 8 to line 135, column 10)",
  " (in 'MNIX_ideal_adaptor', line 123, column 38 to line 136, column 7)",
  " (in 'MNIX_ideal_adaptor', line 123, column 6 to line 141, column 7)",
  " (in 'MNIX_ideal_adaptor', line 142, column 6 to line 143, column 79)",
  " (in 'MNIX_ideal_adaptor', line 122, column 23 to line 144, column 5)",
  " (in 'MNIX_ideal_adaptor', line 122, column 4 to line 144, column 5)",
  " (in 'MNIX_ideal_adaptor', line 118, column 19 to line 145, column 3)",
  " (in 'MNIX_ideal_adaptor', line 118, column 2 to line 145, column 3)",
  " (in 'MNIX_ideal_adaptor', line 148, column 11 to column 12)",
  " (in 'MNIX_ideal_adaptor', line 148, column 4 to column 45)",
  " (in 'MNIX_ideal_adaptor', line 153, column 8 to column 135)",
  " (in 'MNIX_ideal_adaptor', line 150, column 24 to line 154, column 7)",
  " (in 'MNIX_ideal_adaptor', line 150, column 6 to line 154, column 7)",
  " (in 'MNIX_ideal_adaptor', line 149, column 22 to line 155, column 5)",
  " (in 'MNIX_ideal_adaptor', line 149, column 4 to line 155, column 5)",
  " (in 'MNIX_ideal_adaptor', line 156, column 4 to column 39)",
  " (in 'MNIX_ideal_adaptor', line 157, column 4 to column 46)",
  " (in 'MNIX_ideal_adaptor', line 147, column 21 to line 158, column 3)",
  " (in 'MNIX_ideal_adaptor', line 147, column 2 to line 158, column 3)",
  " (in 'MNIX_ideal_adaptor', line 161, column 4 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 162, column 4 to column 22)",
  " (in 'MNIX_ideal_adaptor', line 171, column 6 to line 174, column 66)",
  " (in 'MNIX_ideal_adaptor', line 176, column 6 to column 80)",
  " (in 'MNIX_ideal_adaptor', line 169, column 21 to line 177, column 5)",
  " (in 'MNIX_ideal_adaptor', line 169, column 4 to line 177, column 5)",
  " (in 'MNIX_ideal_adaptor', line 179, column 4 to column 79)",
  " (in 'MNIX_ideal_adaptor', line 160, column 22 to line 180, column 3)",
  " (in 'MNIX_ideal_adaptor', line 160, column 2 to line 180, column 3)",
  " (in 'MNIX_ideal_adaptor', line 222, column 4 to column 102)",
  " (in 'MNIX_ideal_adaptor', line 223, column 4 to column 30)",
  " (in 'MNIX_ideal_adaptor', line 221, column 22 to line 224, column 3)",
  " (in 'MNIX_ideal_adaptor', line 221, column 2 to line 224, column 3)",
  " (in 'MNIX_ideal_adaptor', line 228, column 4 to column 16)",
  " (in 'MNIX_ideal_adaptor', line 232, column 10 to column 92)",
  " (in 'MNIX_ideal_adaptor', line 233, column 10 to column 19)",
  " (in 'MNIX_ideal_adaptor', line 231, column 41 to line 234, column 9)",
  " (in 'MNIX_ideal_adaptor', line 231, column 8 to line 234, column 9)",
  " (in 'MNIX_ideal_adaptor', line 230, column 21 to line 235, column 7)",
  " (in 'MNIX_ideal_adaptor', line 230, column 6 to line 235, column 7)",
  " (in 'MNIX_ideal_adaptor', line 229, column 24 to line 236, column 5)",
  " (in 'MNIX_ideal_adaptor', line 229, column 4 to line 236, column 5)",
  " (in 'MNIX_ideal_adaptor', line 227, column 41 to line 237, column 3)",
  " (in 'MNIX_ideal_adaptor', line 227, column 2 to line 237, column 3)",
  " (in 'MNIX_ideal_adaptor', line 244, column 4 to column 53)",
  " (in 'MNIX_ideal_adaptor', line 246, column 4 to column 85)",
  " (in 'MNIX_ideal_adaptor', line 248, column 6 to column 67)",
  " (in 'MNIX_ideal_adaptor', line 250, column 6 to column 99)",
  " (in 'MNIX_ideal_adaptor', line 247, column 23 to line 251, column 5)",
  " (in 'MNIX_ideal_adaptor', line 247, column 4 to line 251, column 5)",
  " (in 'MNIX_ideal_adaptor', line 243, column 19 to line 252, column 3)",
  " (in 'MNIX_ideal_adaptor', line 243, column 2 to line 252, column 3)",
  " (in 'MNIX_ideal_adaptor', line 183, column 2 to column 37)",
  " (in 'MNIX_ideal_adaptor', line 184, column 2 to column 34)",
  " (in 'MNIX_ideal_adaptor', line 186, column 6 to column 37)",
  " (in 'MNIX_ideal_adaptor', line 188, column 8 to column 54)",
  " (in 'MNIX_ideal_adaptor', line 187, column 23 to line 189, column 7)",
  " (in 'MNIX_ideal_adaptor', line 187, column 6 to line 189, column 7)",
  " (in 'MNIX_ideal_adaptor', line 185, column 19 to line 190, column 3)",
  " (in 'MNIX_ideal_adaptor', line 185, column 2 to line 190, column 3)",
  " (in 'MNIX_ideal_adaptor', line 194, column 6 to column 46)",
  " (in 'MNIX_ideal_adaptor', line 193, column 21 to line 195, column 5)",
  " (in 'MNIX_ideal_adaptor', line 193, column 4 to line 195, column 5)",
  " (in 'MNIX_ideal_adaptor', line 192, column 22 to line 196, column 3)",
  " (in 'MNIX_ideal_adaptor', line 192, column 2 to line 196, column 3)",
  " (in 'MNIX_ideal_adaptor', line 198, column 4 to column 86)",
  " (in 'MNIX_ideal_adaptor', line 197, column 22 to line 199, column 3)",
  " (in 'MNIX_ideal_adaptor', line 197, column 2 to line 199, column 3)",
  " (in 'MNIX_ideal_adaptor', line 24, column 2 to column 8)",
  " (in 'MNIX_ideal_adaptor', line 25, column 2 to column 8)",
  " (in 'MNIX_ideal_adaptor', line 26, column 2 to column 8)",
  " (in 'MNIX_ideal_adaptor', line 27, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 27, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 27, column 2 to column 37)",
  " (in 'MNIX_ideal_adaptor', line 28, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 28, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 28, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 28, column 2 to column 39)",
  " (in 'MNIX_ideal_adaptor', line 29, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 29, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 29, column 24 to column 25)",
  " (in 'MNIX_ideal_adaptor', line 29, column 2 to column 42)",
  " (in 'MNIX_ideal_adaptor', line 30, column 2 to column 13)",
  " (in 'MNIX_ideal_adaptor', line 31, column 8 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 31, column 23 to column 24)",
  " (in 'MNIX_ideal_adaptor', line 31, column 2 to column 33)",
  " (in 'MNIX_ideal_adaptor', line 32, column 8 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 32, column 2 to column 27)",
  " (in 'MNIX_ideal_adaptor', line 33, column 8 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 33, column 15 to column 16)",
  " (in 'MNIX_ideal_adaptor', line 33, column 2 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 37, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 37, column 2 to column 19)",
  " (in 'MNIX_ideal_adaptor', line 38, column 2 to column 41)",
  " (in 'MNIX_ideal_adaptor', line 39, column 2 to column 35)",
  " (in 'MNIX_ideal_adaptor', line 40, column 2 to column 38)",
  " (in 'MNIX_ideal_adaptor', line 49, column 8 to column 32)",
  " (in 'MNIX_ideal_adaptor', line 49, column 2 to column 73)",
  " (in 'MNIX_ideal_adaptor', line 50, column 8 to column 26)",
  " (in 'MNIX_ideal_adaptor', line 50, column 35 to column 53)",
  " (in 'MNIX_ideal_adaptor', line 50, column 2 to column 65)",
  " (in 'MNIX_ideal_adaptor', line 51, column 8 to column 29)",
  " (in 'MNIX_ideal_adaptor', line 51, column 42 to column 63)",
  " (in 'MNIX_ideal_adaptor', line 51, column 2 to column 78)",
  " (in 'MNIX_ideal_adaptor', line 53, column 18 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 53, column 2 to column 48)",
  " (in 'MNIX_ideal_adaptor', line 58, column 9 to column 10)",
  " (in 'MNIX_ideal_adaptor', line 58, column 12 to column 13)",
  " (in 'MNIX_ideal_adaptor', line 58, column 2 to column 25)",
  " (in 'MNIX_ideal_adaptor', line 59, column 9 to column 10)",
  " (in 'MNIX_ideal_adaptor', line 59, column 2 to column 18)",
  " (in 'MNIX_ideal_adaptor', line 60, column 2 to column 53)",
  " (in 'MNIX_ideal_adaptor', line 63, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 63, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 63, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 63, column 2 to column 37)",
  " (in 'MNIX_ideal_adaptor', line 67, column 8 to column 124)",
  " (in 'MNIX_ideal_adaptor', line 66, column 23 to line 68, column 7)",
  " (in 'MNIX_ideal_adaptor', line 66, column 6 to line 68, column 7)",
  " (in 'MNIX_ideal_adaptor', line 65, column 23 to line 69, column 5)",
  " (in 'MNIX_ideal_adaptor', line 65, column 4 to line 69, column 5)",
  " (in 'MNIX_ideal_adaptor', line 64, column 24 to line 70, column 3)",
  " (in 'MNIX_ideal_adaptor', line 64, column 2 to line 70, column 3)",
  " (in 'MNIX_ideal_adaptor', line 72, column 8 to column 29)",
  " (in 'MNIX_ideal_adaptor', line 72, column 38 to column 59)",
  " (in 'MNIX_ideal_adaptor', line 72, column 2 to column 72)",
  " (in 'MNIX_ideal_adaptor', line 75, column 6 to column 58)",
  " (in 'MNIX_ideal_adaptor', line 74, column 21 to line 76, column 5)",
  " (in 'MNIX_ideal_adaptor', line 74, column 4 to line 76, column 5)",
  " (in 'MNIX_ideal_adaptor', line 73, column 21 to line 77, column 3)",
  " (in 'MNIX_ideal_adaptor', line 73, column 2 to line 77, column 3)",
  " (in 'MNIX_ideal_adaptor', line 78, column 2 to column 74)",
  " (in 'MNIX_ideal_adaptor', line 79, column 9 to column 10)",
  " (in 'MNIX_ideal_adaptor', line 79, column 2 to column 38)",
  " (in 'MNIX_ideal_adaptor', line 92, column 8 to column 32)",
  " (in 'MNIX_ideal_adaptor', line 93, column 8 to column 26)",
  " (in 'MNIX_ideal_adaptor', line 93, column 35 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 94, column 18 to column 36)",
  " (in 'MNIX_ideal_adaptor', line 95, column 8 to column 29)",
  " (in 'MNIX_ideal_adaptor', line 95, column 47 to column 48)",
  " (in 'MNIX_ideal_adaptor', line 98, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 98, column 18 to column 19)",
  " (in 'MNIX_ideal_adaptor', line 99, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 99, column 27 to column 28)",
  " (in 'MNIX_ideal_adaptor', line 105, column 9 to column 10)",
  " (in 'MNIX_ideal_adaptor', line 107, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 107, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 108, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 108, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 109, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 109, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 109, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 110, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 110, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 110, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 111, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 111, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 111, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 112, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 112, column 19 to column 20)",
  " (in 'MNIX_ideal_adaptor', line 113, column 8 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 113, column 24 to column 25)",
  " (in 'MNIX_ideal_adaptor', line 114, column 8 to column 14)",
  " (in 'MNIX_ideal_adaptor', line 114, column 23 to column 24)",
  " (in 'MNIX_ideal_adaptor', line 220, column 9 to column 15)",
  " (in 'MNIX_ideal_adaptor', line 226, column 9 to column 75)",
  " (in 'MNIX_ideal_adaptor', line 239, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 239, column 18 to column 19)",
  " (in 'MNIX_ideal_adaptor', line 240, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 240, column 18 to column 19)",
  " (in 'MNIX_ideal_adaptor', line 241, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 241, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 241, column 20 to column 21)",
  " (in 'MNIX_ideal_adaptor', line 242, column 8 to column 9)",
  " (in 'MNIX_ideal_adaptor', line 242, column 10 to column 11)",
  " (in 'MNIX_ideal_adaptor', line 242, column 20 to column 21)"};
#include <stan_meta_header.hpp>
class model_MNIX_ideal_adaptor final : public model_base_crtp<model_MNIX_ideal_adaptor> {
private:
  int K;
  int L;
  int M;
  std::vector<std::vector<int>> N_exposure;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> x_mean_exposure;
  std::vector<std::vector<Eigen::Matrix<double,-1,-1>>> x_cov_exposure;
  int N_test;
  std::vector<Eigen::Matrix<double,-1,1>> x_test;
  std::vector<int> y_test;
  std::vector<std::vector<int>> z_test_counts;
  Eigen::Matrix<double,-1,1> p_cat_data__;
  int lapse_rate_known;
  int mu_0_known;
  int Sigma_0_known;
  std::vector<double> lapse_rate_data;
  std::vector<Eigen::Matrix<double,-1,1>> mu_0_data;
  std::vector<Eigen::Matrix<double,-1,-1>> Sigma_0_data;
  Eigen::Matrix<double,-1,1> tau_scale_data__;
  Eigen::Matrix<double,-1,-1> INV_SCALE_data__;
  Eigen::Matrix<double,-1,1> shift_data__;
  int split_loglik_per_observation;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> x_ss_exposure;
  std::vector<Eigen::Matrix<double,-1,1>> tau_0_data;
  double sigma_kappanu;
  Eigen::Matrix<double,-1,1> m_0_mu_data__;
  int lapse_rate_param_1dim__;
  int m_0_param_1dim__;
  int m_0_tau_1dim__;
  int tau_0_param_1dim__;
  int log_lik_split_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> p_cat{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> tau_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> INV_SCALE{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> shift{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> m_0_mu{nullptr, 0};
public:
  ~model_MNIX_ideal_adaptor() {}
  model_MNIX_ideal_adaptor(stan::io::var_context& context__, unsigned int
                           random_seed__ = 0, std::ostream*
                           pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    using local_scalar_t__ = double;
    auto base_rng__ = stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_MNIX_ideal_adaptor_namespace::model_MNIX_ideal_adaptor";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 102;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 102;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 103;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 103;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 104;
      context__.validate_dims("data initialization", "M", "int",
        std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      current_statement__ = 104;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 105;
      stan::math::validate_non_negative_index("N_exposure", "M", M);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("N_exposure", "L", L);
      current_statement__ = 107;
      context__.validate_dims("data initialization", "N_exposure", "int",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L)});
      N_exposure = std::vector<std::vector<int>>(M,
                     std::vector<int>(L, std::numeric_limits<int>::min()));
      {
        std::vector<int> N_exposure_flat__;
        current_statement__ = 107;
        N_exposure_flat__ = context__.vals_i("N_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            stan::model::assign(N_exposure, N_exposure_flat__[(pos__ - 1)],
              "assigning variable N_exposure",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 107;
      stan::math::check_greater_or_equal(function__, "N_exposure",
        N_exposure, 0);
      current_statement__ = 108;
      stan::math::validate_non_negative_index("x_mean_exposure", "M", M);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("x_mean_exposure", "L", L);
      current_statement__ = 110;
      stan::math::validate_non_negative_index("x_mean_exposure", "K", K);
      current_statement__ = 111;
      context__.validate_dims("data initialization", "x_mean_exposure",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L),
          static_cast<size_t>(K)});
      x_mean_exposure = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
                          std::vector<Eigen::Matrix<double,-1,1>>(L,
                            Eigen::Matrix<double,-1,1>::Constant(K,
                              std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> x_mean_exposure_flat__;
        current_statement__ = 111;
        x_mean_exposure_flat__ = context__.vals_r("x_mean_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              stan::model::assign(x_mean_exposure,
                x_mean_exposure_flat__[(pos__ - 1)],
                "assigning variable x_mean_exposure",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 112;
      stan::math::validate_non_negative_index("x_cov_exposure", "M", M);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("x_cov_exposure", "L", L);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("x_cov_exposure", "K", K);
      current_statement__ = 114;
      stan::math::validate_non_negative_index("x_cov_exposure", "K", K);
      current_statement__ = 115;
      context__.validate_dims("data initialization", "x_cov_exposure",
        "double",
        std::vector<size_t>{static_cast<size_t>(M), static_cast<size_t>(L),
          static_cast<size_t>(K), static_cast<size_t>(K)});
      x_cov_exposure = std::vector<std::vector<Eigen::Matrix<double,-1,-1>>>(M,
                         std::vector<Eigen::Matrix<double,-1,-1>>(L,
                           Eigen::Matrix<double,-1,-1>::Constant(K, K,
                             std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> x_cov_exposure_flat__;
        current_statement__ = 115;
        x_cov_exposure_flat__ = context__.vals_r("x_cov_exposure");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= L; ++sym3__) {
              for (int sym4__ = 1; sym4__ <= M; ++sym4__) {
                stan::model::assign(x_cov_exposure,
                  x_cov_exposure_flat__[(pos__ - 1)],
                  "assigning variable x_cov_exposure",
                  stan::model::index_uni(sym4__),
                  stan::model::index_uni(sym3__),
                  stan::model::index_uni(sym2__),
                  stan::model::index_uni(sym1__));
                pos__ = (pos__ + 1);
              }
            }
          }
        }
      }
      current_statement__ = 115;
      stan::math::check_cov_matrix(function__, "x_cov_exposure",
        x_cov_exposure);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "N_test", "int",
        std::vector<size_t>{});
      N_test = std::numeric_limits<int>::min();
      current_statement__ = 116;
      N_test = context__.vals_i("N_test")[(1 - 1)];
      current_statement__ = 117;
      stan::math::validate_non_negative_index("x_test", "N_test", N_test);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("x_test", "K", K);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "x_test", "double",
        std::vector<size_t>{static_cast<size_t>(N_test),
          static_cast<size_t>(K)});
      x_test = std::vector<Eigen::Matrix<double,-1,1>>(N_test,
                 Eigen::Matrix<double,-1,1>::Constant(K,
                   std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> x_test_flat__;
        current_statement__ = 119;
        x_test_flat__ = context__.vals_r("x_test");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            stan::model::assign(x_test, x_test_flat__[(pos__ - 1)],
              "assigning variable x_test", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 120;
      stan::math::validate_non_negative_index("y_test", "N_test", N_test);
      current_statement__ = 121;
      context__.validate_dims("data initialization", "y_test", "int",
        std::vector<size_t>{static_cast<size_t>(N_test)});
      y_test = std::vector<int>(N_test, std::numeric_limits<int>::min());
      current_statement__ = 121;
      y_test = context__.vals_i("y_test");
      current_statement__ = 122;
      stan::math::validate_non_negative_index("z_test_counts", "N_test",
        N_test);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("z_test_counts", "M", M);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "z_test_counts", "int",
        std::vector<size_t>{static_cast<size_t>(N_test),
          static_cast<size_t>(M)});
      z_test_counts = std::vector<std::vector<int>>(N_test,
                        std::vector<int>(M, std::numeric_limits<int>::min()));
      {
        std::vector<int> z_test_counts_flat__;
        current_statement__ = 124;
        z_test_counts_flat__ = context__.vals_i("z_test_counts");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            stan::model::assign(z_test_counts, z_test_counts_flat__[(pos__ -
              1)], "assigning variable z_test_counts",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("p_cat", "M", M);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "p_cat", "double",
        std::vector<size_t>{static_cast<size_t>(M)});
      p_cat_data__ = Eigen::Matrix<double,-1,1>::Constant(M,
                       std::numeric_limits<double>::quiet_NaN());
      new (&p_cat)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(p_cat_data__.data(), M);
      {
        std::vector<local_scalar_t__> p_cat_flat__;
        current_statement__ = 126;
        p_cat_flat__ = context__.vals_r("p_cat");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          stan::model::assign(p_cat, p_cat_flat__[(pos__ - 1)],
            "assigning variable p_cat", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 126;
      stan::math::check_simplex(function__, "p_cat", p_cat);
      current_statement__ = 127;
      context__.validate_dims("data initialization", "lapse_rate_known",
        "int", std::vector<size_t>{});
      lapse_rate_known = std::numeric_limits<int>::min();
      current_statement__ = 127;
      lapse_rate_known = context__.vals_i("lapse_rate_known")[(1 - 1)];
      current_statement__ = 127;
      stan::math::check_greater_or_equal(function__, "lapse_rate_known",
        lapse_rate_known, 0);
      current_statement__ = 127;
      stan::math::check_less_or_equal(function__, "lapse_rate_known",
        lapse_rate_known, 1);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "mu_0_known", "int",
        std::vector<size_t>{});
      mu_0_known = std::numeric_limits<int>::min();
      current_statement__ = 128;
      mu_0_known = context__.vals_i("mu_0_known")[(1 - 1)];
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "mu_0_known",
        mu_0_known, 0);
      current_statement__ = 128;
      stan::math::check_less_or_equal(function__, "mu_0_known", mu_0_known, 1);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "Sigma_0_known", "int",
        std::vector<size_t>{});
      Sigma_0_known = std::numeric_limits<int>::min();
      current_statement__ = 129;
      Sigma_0_known = context__.vals_i("Sigma_0_known")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "Sigma_0_known",
        Sigma_0_known, 0);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "Sigma_0_known",
        Sigma_0_known, 1);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("lapse_rate_data",
        "lapse_rate_known ? 1 : 0", (lapse_rate_known ? 1 : 0));
      current_statement__ = 131;
      context__.validate_dims("data initialization", "lapse_rate_data",
        "double",
        std::vector<size_t>{static_cast<size_t>((lapse_rate_known ? 1 : 0))});
      lapse_rate_data = std::vector<double>((lapse_rate_known ? 1 : 0),
                          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 131;
      lapse_rate_data = context__.vals_r("lapse_rate_data");
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "lapse_rate_data",
        lapse_rate_data, 0);
      current_statement__ = 131;
      stan::math::check_less_or_equal(function__, "lapse_rate_data",
        lapse_rate_data, 1);
      current_statement__ = 132;
      stan::math::validate_non_negative_index("mu_0_data",
        "mu_0_known ? M : 0", (mu_0_known ? M : 0));
      current_statement__ = 133;
      stan::math::validate_non_negative_index("mu_0_data",
        "mu_0_known ? K : 0", (mu_0_known ? K : 0));
      current_statement__ = 134;
      context__.validate_dims("data initialization", "mu_0_data", "double",
        std::vector<size_t>{static_cast<size_t>((mu_0_known ? M : 0)),
          static_cast<size_t>((mu_0_known ? K : 0))});
      mu_0_data = std::vector<Eigen::Matrix<double,-1,1>>((mu_0_known ? M : 0),
                    Eigen::Matrix<double,-1,1>::Constant((mu_0_known ? K : 0),
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> mu_0_data_flat__;
        current_statement__ = 134;
        mu_0_data_flat__ = context__.vals_r("mu_0_data");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (mu_0_known ? K : 0); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= (mu_0_known ? M : 0); ++sym2__) {
            stan::model::assign(mu_0_data, mu_0_data_flat__[(pos__ - 1)],
              "assigning variable mu_0_data", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 135;
      stan::math::validate_non_negative_index("Sigma_0_data",
        "Sigma_0_known ? M : 0", (Sigma_0_known ? M : 0));
      current_statement__ = 136;
      stan::math::validate_non_negative_index("Sigma_0_data",
        "Sigma_0_known ? K : 0", (Sigma_0_known ? K : 0));
      current_statement__ = 136;
      stan::math::validate_non_negative_index("Sigma_0_data",
        "Sigma_0_known ? K : 0", (Sigma_0_known ? K : 0));
      current_statement__ = 137;
      context__.validate_dims("data initialization", "Sigma_0_data",
        "double",
        std::vector<size_t>{static_cast<size_t>((Sigma_0_known ? M : 0)),
          static_cast<size_t>((Sigma_0_known ? K : 0)),
          static_cast<size_t>((Sigma_0_known ? K : 0))});
      Sigma_0_data = std::vector<Eigen::Matrix<double,-1,-1>>((Sigma_0_known ? M : 0),
                       Eigen::Matrix<double,-1,-1>::Constant((Sigma_0_known ? K : 0),
                         (Sigma_0_known ? K : 0),
                         std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> Sigma_0_data_flat__;
        current_statement__ = 137;
        Sigma_0_data_flat__ = context__.vals_r("Sigma_0_data");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (Sigma_0_known ? K : 0); ++sym1__) {
          for (int sym2__ = 1; sym2__ <= (Sigma_0_known ? K : 0); ++sym2__) {
            for (int sym3__ = 1; sym3__ <= (Sigma_0_known ? M : 0); ++sym3__) {
              stan::model::assign(Sigma_0_data, Sigma_0_data_flat__[(pos__ -
                1)], "assigning variable Sigma_0_data",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 137;
      stan::math::check_cov_matrix(function__, "Sigma_0_data", Sigma_0_data);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("tau_scale",
        "mu_0_known ? 0 : K", (mu_0_known ? 0 : K));
      current_statement__ = 139;
      context__.validate_dims("data initialization", "tau_scale", "double",
        std::vector<size_t>{static_cast<size_t>((mu_0_known ? 0 : K))});
      tau_scale_data__ = Eigen::Matrix<double,-1,1>::Constant((mu_0_known ? 0 : K),
                           std::numeric_limits<double>::quiet_NaN());
      new (&tau_scale)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(tau_scale_data__.data(),
        (mu_0_known ? 0 : K));
      {
        std::vector<local_scalar_t__> tau_scale_flat__;
        current_statement__ = 139;
        tau_scale_flat__ = context__.vals_r("tau_scale");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= (mu_0_known ? 0 : K); ++sym1__) {
          stan::model::assign(tau_scale, tau_scale_flat__[(pos__ - 1)],
            "assigning variable tau_scale", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "tau_scale", tau_scale,
        0);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("INV_SCALE", "K", K);
      current_statement__ = 141;
      stan::math::validate_non_negative_index("INV_SCALE", "K", K);
      current_statement__ = 142;
      context__.validate_dims("data initialization", "INV_SCALE", "double",
        std::vector<size_t>{static_cast<size_t>(K), static_cast<size_t>(K)});
      INV_SCALE_data__ = Eigen::Matrix<double,-1,-1>::Constant(K, K,
                           std::numeric_limits<double>::quiet_NaN());
      new (&INV_SCALE)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(INV_SCALE_data__.data(), K,
        K);
      {
        std::vector<local_scalar_t__> INV_SCALE_flat__;
        current_statement__ = 142;
        INV_SCALE_flat__ = context__.vals_r("INV_SCALE");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= K; ++sym2__) {
            stan::model::assign(INV_SCALE, INV_SCALE_flat__[(pos__ - 1)],
              "assigning variable INV_SCALE", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 143;
      stan::math::validate_non_negative_index("shift", "K", K);
      current_statement__ = 144;
      context__.validate_dims("data initialization", "shift", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      shift_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                       std::numeric_limits<double>::quiet_NaN());
      new (&shift)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(shift_data__.data(), K);
      {
        std::vector<local_scalar_t__> shift_flat__;
        current_statement__ = 144;
        shift_flat__ = context__.vals_r("shift");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          stan::model::assign(shift, shift_flat__[(pos__ - 1)],
            "assigning variable shift", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 145;
      context__.validate_dims("data initialization",
        "split_loglik_per_observation", "int", std::vector<size_t>{});
      split_loglik_per_observation = std::numeric_limits<int>::min();
      current_statement__ = 145;
      split_loglik_per_observation = context__.vals_i("split_loglik_per_observation")[(1
        - 1)];
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__,
        "split_loglik_per_observation", split_loglik_per_observation, 0);
      current_statement__ = 145;
      stan::math::check_less_or_equal(function__,
        "split_loglik_per_observation", split_loglik_per_observation, 1);
      current_statement__ = 146;
      stan::math::validate_non_negative_index("x_ss_exposure", "M", M);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("x_ss_exposure", "L", L);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("x_ss_exposure", "K", K);
      current_statement__ = 149;
      x_ss_exposure = std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
                        std::vector<Eigen::Matrix<double,-1,1>>(L,
                          Eigen::Matrix<double,-1,1>::Constant(K,
                            std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 156;
      for (int category = 1; category <= M; ++category) {
        current_statement__ = 154;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 152;
          for (int cue = 1; cue <= K; ++cue) {
            current_statement__ = 150;
            stan::model::assign(x_ss_exposure,
              (stan::model::rvalue(x_cov_exposure, "x_cov_exposure",
                 stan::model::index_uni(category),
                 stan::model::index_uni(group), stan::model::index_uni(cue),
                 stan::model::index_uni(cue)) *
              (stan::model::rvalue(N_exposure, "N_exposure",
                 stan::model::index_uni(category),
                 stan::model::index_uni(group)) - 1)),
              "assigning variable x_ss_exposure",
              stan::model::index_uni(category),
              stan::model::index_uni(group), stan::model::index_uni(cue));
          }
        }
      }
      current_statement__ = 157;
      stan::math::validate_non_negative_index("tau_0_data",
        "Sigma_0_known ? M : 0", (Sigma_0_known ? M : 0));
      current_statement__ = 158;
      stan::math::validate_non_negative_index("tau_0_data",
        "Sigma_0_known ? K : 0", (Sigma_0_known ? K : 0));
      current_statement__ = 159;
      tau_0_data = std::vector<Eigen::Matrix<double,-1,1>>((Sigma_0_known ? M : 0),
                     Eigen::Matrix<double,-1,1>::Constant((Sigma_0_known ? K : 0),
                       std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 164;
      if (Sigma_0_known) {
        current_statement__ = 162;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 160;
          stan::model::assign(tau_0_data,
            stan::math::sqrt(
              stan::math::diagonal(
                stan::model::rvalue(Sigma_0_data, "Sigma_0_data",
                  stan::model::index_uni(cat)))),
            "assigning variable tau_0_data", stan::model::index_uni(cat));
        }
      }
      current_statement__ = 165;
      sigma_kappanu = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 165;
      sigma_kappanu = stan::math::max(
                        (stan::math::max(stan::math::to_array_1d(N_exposure))
                        * 4), 10);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("m_0_mu", "K", K);
      current_statement__ = 167;
      m_0_mu_data__ = Eigen::Matrix<double,-1,1>::Constant(K,
                        std::numeric_limits<double>::quiet_NaN());
      new (&m_0_mu)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(m_0_mu_data__.data(), K);
      current_statement__ = 167;
      stan::model::assign(m_0_mu, stan::math::rep_vector(0, K),
        "assigning variable m_0_mu");
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__, "sigma_kappanu",
        sigma_kappanu, 0);
      current_statement__ = 168;
      lapse_rate_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 168;
      lapse_rate_param_1dim__ = (lapse_rate_known ? 0 : 1);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("lapse_rate_param",
        "lapse_rate_known ? 0 : 1", lapse_rate_param_1dim__);
      current_statement__ = 169;
      m_0_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 169;
      m_0_param_1dim__ = (mu_0_known ? 0 : M);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("m_0_param",
        "mu_0_known ? 0 : M", m_0_param_1dim__);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("m_0_param", "K", K);
      current_statement__ = 171;
      m_0_tau_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 171;
      m_0_tau_1dim__ = (mu_0_known ? 0 : K);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("m_0_tau",
        "mu_0_known ? 0 : K", m_0_tau_1dim__);
      current_statement__ = 172;
      tau_0_param_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 172;
      tau_0_param_1dim__ = (Sigma_0_known ? 0 : M);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("tau_0_param",
        "Sigma_0_known ? 0 : M", tau_0_param_1dim__);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("tau_0_param", "K", K);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("m_0", "M", M);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("m_0", "K", K);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("tau_0", "M", M);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("tau_0", "K", K);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("lapsing_probs", "M", M);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("kappa_n", "M", M);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("kappa_n", "L", L);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("nu_n", "M", M);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("nu_n", "L", L);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("m_n", "M", M);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("m_n", "L", L);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("m_n", "K", K);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("tau_n", "M", M);
      current_statement__ = 187;
      stan::math::validate_non_negative_index("tau_n", "L", L);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("tau_n", "K", K);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("t_scale", "M", M);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("t_scale", "L", L);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("t_scale", "K", K);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("cue_weights", "L", L);
      current_statement__ = 193;
      stan::math::validate_non_negative_index("cue_weights", "K", K);
      current_statement__ = 194;
      stan::math::validate_non_negative_index("p_test_conj", "N_test", N_test);
      current_statement__ = 195;
      stan::math::validate_non_negative_index("p_test_conj", "M", M);
      current_statement__ = 196;
      stan::math::validate_non_negative_index("log_p_test_conj", "N_test",
        N_test);
      current_statement__ = 197;
      stan::math::validate_non_negative_index("log_p_test_conj", "M", M);
      current_statement__ = 198;
      stan::math::validate_non_negative_index("log_lik", "N_test", N_test);
      current_statement__ = 199;
      log_lik_split_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 199;
      log_lik_split_1dim__ = (split_loglik_per_observation ? stan::math::sum(
                                                               stan::math::to_array_1d(
                                                                 z_test_counts)) : 0);
      current_statement__ = 199;
      stan::math::validate_non_negative_index("log_lik_split",
        "split_loglik_per_observation ? sum(to_array_1d(z_test_counts)) : 0",
        log_lik_split_1dim__);
      current_statement__ = 200;
      stan::math::validate_non_negative_index("m_0_original", "M", M);
      current_statement__ = 201;
      stan::math::validate_non_negative_index("m_0_original", "K", K);
      current_statement__ = 202;
      stan::math::validate_non_negative_index("S_0_original", "M", M);
      current_statement__ = 203;
      stan::math::validate_non_negative_index("S_0_original", "K", K);
      current_statement__ = 204;
      stan::math::validate_non_negative_index("m_n_original", "M", M);
      current_statement__ = 205;
      stan::math::validate_non_negative_index("m_n_original", "L", L);
      current_statement__ = 206;
      stan::math::validate_non_negative_index("m_n_original", "K", K);
      current_statement__ = 207;
      stan::math::validate_non_negative_index("S_n_original", "M", M);
      current_statement__ = 208;
      stan::math::validate_non_negative_index("S_n_original", "L", L);
      current_statement__ = 209;
      stan::math::validate_non_negative_index("S_n_original", "K", K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + lapse_rate_param_1dim__ + (m_0_param_1dim__ * K)
      + m_0_tau_1dim__ + (tau_0_param_1dim__ * K);
  }
  inline std::string model_name() const final {
    return "model_MNIX_ideal_adaptor";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.37.0-rc1",
             "stancflags = --allow-undefined"};
  }
  // Base log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_not_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_MNIX_ideal_adaptor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(K,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>((K +
          1), lp__);
      current_statement__ = 3;
      auto lapse_rate_param =
        in__.template read_constrain_lub<std::vector<local_scalar_t__>,
          jacobian__>(0, 1, lp__, lapse_rate_param_1dim__);
      current_statement__ = 4;
      auto m_0_param =
        in__.template read<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(m_0_param_1dim__,
          K);
      current_statement__ = 5;
      auto m_0_tau =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, m_0_tau_1dim__);
      current_statement__ = 6;
      auto tau_0_param =
        in__.template read_constrain_lb<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>, jacobian__>(0,
          lp__, tau_0_param_1dim__, K);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m_0 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 7;
      stan::model::assign(m_0,
        (mu_0_known ? stan::math::promote_scalar<local_scalar_t__>(mu_0_data) : m_0_param),
        "assigning variable m_0");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> tau_0 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      local_scalar_t__ lapse_rate = DUMMY_VAR__;
      current_statement__ = 9;
      lapse_rate = (lapse_rate_known ? stan::model::rvalue(lapse_rate_data,
                                         "lapse_rate_data",
                                         stan::model::index_uni(1)) : 
        stan::model::rvalue(lapse_rate_param, "lapse_rate_param",
          stan::model::index_uni(1)));
      Eigen::Matrix<local_scalar_t__,-1,1> lapsing_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      std::vector<std::vector<local_scalar_t__>> kappa_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> nu_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> m_n =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> tau_n =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>
        t_scale =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> cue_weights =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      current_statement__ = 42;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 26;
        stan::model::assign(tau_0,
          (Sigma_0_known ? stan::math::eval(
                             stan::math::multiply(
                               stan::model::rvalue(tau_0_data, "tau_0_data",
                                 stan::model::index_uni(cat)),
                               stan::math::sqrt(((nu_0 - 2) / nu_0)))) : 
          stan::math::eval(
            stan::model::rvalue(tau_0_param, "tau_0_param",
              stan::model::index_uni(cat)))), "assigning variable tau_0",
          stan::model::index_uni(cat));
        current_statement__ = 40;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 37;
          if (stan::math::logical_gt(
                stan::model::rvalue(N_exposure, "N_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group)),
                0)) {
            current_statement__ = 32;
            stan::model::assign(kappa_n, (kappa_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 33;
            stan::model::assign(nu_n, (nu_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable nu_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 34;
            stan::model::assign(m_n,
              stan::math::divide(
                stan::math::add(
                  stan::math::multiply(kappa_0,
                    stan::model::rvalue(m_0, "m_0",
                      stan::model::index_uni(cat))),
                  stan::math::multiply(
                    stan::model::rvalue(N_exposure, "N_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)),
                    stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)))),
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 35;
            stan::model::assign(tau_n,
              stan::math::sqrt(
                stan::math::divide(
                  stan::math::add(
                    stan::math::add(
                      stan::math::multiply(nu_0,
                        stan::math::pow(
                          stan::model::rvalue(tau_0, "tau_0",
                            stan::model::index_uni(cat)), 2)),
                      stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                    stan::math::multiply(
                      ((stan::model::rvalue(N_exposure, "N_exposure",
                          stan::model::index_uni(cat),
                          stan::model::index_uni(group)) * kappa_0) /
                      stan::model::rvalue(kappa_n, "kappa_n",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                      stan::math::pow(
                        stan::math::subtract(
                          stan::model::rvalue(m_0, "m_0",
                            stan::model::index_uni(cat)),
                          stan::model::rvalue(x_mean_exposure,
                            "x_mean_exposure", stan::model::index_uni(cat),
                            stan::model::index_uni(group))), 2))),
                  stan::model::rvalue(nu_n, "nu_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)))),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          } else {
            current_statement__ = 27;
            stan::model::assign(kappa_n, kappa_0,
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 28;
            stan::model::assign(nu_n, nu_0, "assigning variable nu_n",
              stan::model::index_uni(cat), stan::model::index_uni(group));
            current_statement__ = 29;
            stan::model::assign(m_n,
              stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 30;
            stan::model::assign(tau_n,
              stan::model::rvalue(tau_0, "tau_0", stan::model::index_uni(cat)),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          }
          current_statement__ = 38;
          stan::model::assign(t_scale,
            stan::math::multiply(
              stan::model::rvalue(tau_n, "tau_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)),
              stan::math::sqrt(
                ((stan::model::rvalue(kappa_n, "kappa_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)) + 1) /
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 53;
      for (int group = 1; group <= L; ++group) {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("raw_weights", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> raw_weights =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        current_statement__ = 44;
        stan::model::assign(raw_weights, stan::math::rep_vector(0, K),
          "assigning variable raw_weights");
        current_statement__ = 49;
        for (int cat1 = 1; cat1 <= M; ++cat1) {
          current_statement__ = 47;
          for (int cat2 = 1; cat2 <= M; ++cat2) {
            current_statement__ = 45;
            stan::model::assign(raw_weights,
              stan::math::add(stan::model::deep_copy(raw_weights),
                stan::math::multiply(
                  (stan::model::rvalue(p_cat, "p_cat",
                     stan::model::index_uni(cat1)) *
                  stan::model::rvalue(p_cat, "p_cat",
                    stan::model::index_uni(cat2))),
                  stan::math::elt_divide(
                    stan::math::pow(
                      stan::math::subtract(
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat1),
                          stan::model::index_uni(group)),
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat2),
                          stan::model::index_uni(group))), 2),
                    stan::math::elt_multiply(
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat1),
                        stan::model::index_uni(group)),
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat2),
                        stan::model::index_uni(group)))))),
              "assigning variable raw_weights");
          }
        }
        current_statement__ = 50;
        stan::model::assign(raw_weights,
          stan::math::elt_divide(stan::model::deep_copy(raw_weights),
            stan::math::rep_vector(2.0, K)), "assigning variable raw_weights");
        current_statement__ = 51;
        stan::model::assign(cue_weights, stan::math::softmax(raw_weights),
          "assigning variable cue_weights", stan::model::index_uni(group));
      }
      current_statement__ = 62;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 55;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 59;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 56;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
          current_statement__ = 57;
          stan::model::assign(log_p_test_conj,
            stan::math::sum(
              stan::math::multiply(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j), stan::model::index_uni(cat)),
                stan::model::rvalue(cue_weights, "cue_weights",
                  stan::model::index_uni(group)))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 60;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "tau_0", tau_0, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, K);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, K);
      current_statement__ = 16;
      stan::math::check_simplex(function__, "cue_weights", cue_weights);
      current_statement__ = 17;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      {
        current_statement__ = 86;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(kappa_0, 0,
                         sigma_kappanu));
        current_statement__ = 87;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(nu_0, 0,
                         sigma_kappanu));
        current_statement__ = 93;
        if (stan::math::logical_negation(mu_0_known)) {
          current_statement__ = 88;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(m_0_tau, 0,
                           tau_scale));
          current_statement__ = 91;
          for (int cat = 1; cat <= M; ++cat) {
            current_statement__ = 89;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(m_0_param, "m_0_param",
                               stan::model::index_uni(cat)),
                             stan::model::rvalue(m_0_mu, "m_0_mu",
                               stan::model::index_uni(cat)), m_0_tau));
          }
        }
        current_statement__ = 98;
        if (stan::math::logical_negation(Sigma_0_known)) {
          current_statement__ = 96;
          for (int cat = 1; cat <= M; ++cat) {
            current_statement__ = 94;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                             stan::model::rvalue(tau_0_param, "tau_0_param",
                               stan::model::index_uni(cat)), 0, tau_scale));
          }
        }
        current_statement__ = 101;
        for (int i = 1; i <= N_test; ++i) {
          current_statement__ = 99;
          lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                           stan::model::rvalue(z_test_counts,
                             "z_test_counts", stan::model::index_uni(i)),
                           stan::math::add(
                             stan::math::multiply(
                               stan::model::rvalue(p_test_conj,
                                 "p_test_conj", stan::model::index_uni(i)),
                               (1 - lapse_rate)), lapsing_probs)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  // Reverse mode autodiff log prob
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr,
            stan::require_st_var<VecR>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_MNIX_ideal_adaptor_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(K,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>((K +
          1), lp__);
      current_statement__ = 3;
      auto lapse_rate_param =
        in__.template read_constrain_lub<std::vector<local_scalar_t__>,
          jacobian__>(0, 1, lp__, lapse_rate_param_1dim__);
      current_statement__ = 4;
      auto m_0_param =
        in__.template read<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(m_0_param_1dim__,
          K);
      current_statement__ = 5;
      auto m_0_tau =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, m_0_tau_1dim__);
      current_statement__ = 6;
      auto tau_0_param =
        in__.template read_constrain_lb<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>, jacobian__>(0,
          lp__, tau_0_param_1dim__, K);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m_0 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 7;
      stan::model::assign(m_0,
        (mu_0_known ? stan::math::promote_scalar<local_scalar_t__>(mu_0_data) : m_0_param),
        "assigning variable m_0");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> tau_0 =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(M,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      local_scalar_t__ lapse_rate = DUMMY_VAR__;
      current_statement__ = 9;
      lapse_rate = (lapse_rate_known ? stan::model::rvalue(lapse_rate_data,
                                         "lapse_rate_data",
                                         stan::model::index_uni(1)) : 
        stan::model::rvalue(lapse_rate_param, "lapse_rate_param",
          stan::model::index_uni(1)));
      Eigen::Matrix<local_scalar_t__,-1,1> lapsing_probs =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__);
      current_statement__ = 10;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      std::vector<std::vector<local_scalar_t__>> kappa_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<local_scalar_t__>> nu_n =
        std::vector<std::vector<local_scalar_t__>>(M,
          std::vector<local_scalar_t__>(L, DUMMY_VAR__));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> m_n =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>> tau_n =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>
        t_scale =
        std::vector<std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(M,
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__)));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> cue_weights =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(L,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(M, DUMMY_VAR__));
      current_statement__ = 42;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 26;
        stan::model::assign(tau_0,
          (Sigma_0_known ? stan::math::eval(
                             stan::math::multiply(
                               stan::model::rvalue(tau_0_data, "tau_0_data",
                                 stan::model::index_uni(cat)),
                               stan::math::sqrt(((nu_0 - 2) / nu_0)))) : 
          stan::math::eval(
            stan::model::rvalue(tau_0_param, "tau_0_param",
              stan::model::index_uni(cat)))), "assigning variable tau_0",
          stan::model::index_uni(cat));
        current_statement__ = 40;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 37;
          if (stan::math::logical_gt(
                stan::model::rvalue(N_exposure, "N_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group)),
                0)) {
            current_statement__ = 32;
            stan::model::assign(kappa_n, (kappa_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 33;
            stan::model::assign(nu_n, (nu_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable nu_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 34;
            stan::model::assign(m_n,
              stan::math::divide(
                stan::math::add(
                  stan::math::multiply(kappa_0,
                    stan::model::rvalue(m_0, "m_0",
                      stan::model::index_uni(cat))),
                  stan::math::multiply(
                    stan::model::rvalue(N_exposure, "N_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)),
                    stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)))),
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 35;
            stan::model::assign(tau_n,
              stan::math::sqrt(
                stan::math::divide(
                  stan::math::add(
                    stan::math::add(
                      stan::math::multiply(nu_0,
                        stan::math::pow(
                          stan::model::rvalue(tau_0, "tau_0",
                            stan::model::index_uni(cat)), 2)),
                      stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                    stan::math::multiply(
                      ((stan::model::rvalue(N_exposure, "N_exposure",
                          stan::model::index_uni(cat),
                          stan::model::index_uni(group)) * kappa_0) /
                      stan::model::rvalue(kappa_n, "kappa_n",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                      stan::math::pow(
                        stan::math::subtract(
                          stan::model::rvalue(m_0, "m_0",
                            stan::model::index_uni(cat)),
                          stan::model::rvalue(x_mean_exposure,
                            "x_mean_exposure", stan::model::index_uni(cat),
                            stan::model::index_uni(group))), 2))),
                  stan::model::rvalue(nu_n, "nu_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)))),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          } else {
            current_statement__ = 27;
            stan::model::assign(kappa_n, kappa_0,
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 28;
            stan::model::assign(nu_n, nu_0, "assigning variable nu_n",
              stan::model::index_uni(cat), stan::model::index_uni(group));
            current_statement__ = 29;
            stan::model::assign(m_n,
              stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 30;
            stan::model::assign(tau_n,
              stan::model::rvalue(tau_0, "tau_0", stan::model::index_uni(cat)),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          }
          current_statement__ = 38;
          stan::model::assign(t_scale,
            stan::math::multiply(
              stan::model::rvalue(tau_n, "tau_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)),
              stan::math::sqrt(
                ((stan::model::rvalue(kappa_n, "kappa_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)) + 1) /
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 53;
      for (int group = 1; group <= L; ++group) {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("raw_weights", "K", K);
        Eigen::Matrix<local_scalar_t__,-1,1> raw_weights =
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__);
        current_statement__ = 44;
        stan::model::assign(raw_weights, stan::math::rep_vector(0, K),
          "assigning variable raw_weights");
        current_statement__ = 49;
        for (int cat1 = 1; cat1 <= M; ++cat1) {
          current_statement__ = 47;
          for (int cat2 = 1; cat2 <= M; ++cat2) {
            current_statement__ = 45;
            stan::model::assign(raw_weights,
              stan::math::add(stan::model::deep_copy(raw_weights),
                stan::math::multiply(
                  (stan::model::rvalue(p_cat, "p_cat",
                     stan::model::index_uni(cat1)) *
                  stan::model::rvalue(p_cat, "p_cat",
                    stan::model::index_uni(cat2))),
                  stan::math::elt_divide(
                    stan::math::pow(
                      stan::math::subtract(
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat1),
                          stan::model::index_uni(group)),
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat2),
                          stan::model::index_uni(group))), 2),
                    stan::math::elt_multiply(
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat1),
                        stan::model::index_uni(group)),
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat2),
                        stan::model::index_uni(group)))))),
              "assigning variable raw_weights");
          }
        }
        current_statement__ = 50;
        stan::model::assign(raw_weights,
          stan::math::elt_divide(stan::model::deep_copy(raw_weights),
            stan::math::rep_vector(2.0, K)), "assigning variable raw_weights");
        current_statement__ = 51;
        stan::model::assign(cue_weights, stan::math::softmax(raw_weights),
          "assigning variable cue_weights", stan::model::index_uni(group));
      }
      current_statement__ = 62;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 55;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 59;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 56;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
          current_statement__ = 57;
          stan::model::assign(log_p_test_conj,
            stan::math::sum(
              stan::math::multiply(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j), stan::model::index_uni(cat)),
                stan::model::rvalue(cue_weights, "cue_weights",
                  stan::model::index_uni(group)))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 60;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "tau_0", tau_0, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, K);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, K);
      current_statement__ = 16;
      stan::math::check_simplex(function__, "cue_weights", cue_weights);
      current_statement__ = 17;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      {
        current_statement__ = 86;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(kappa_0, 0,
                         sigma_kappanu));
        current_statement__ = 87;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(nu_0, 0,
                         sigma_kappanu));
        current_statement__ = 93;
        if (stan::math::logical_negation(mu_0_known)) {
          current_statement__ = 88;
          lp_accum__.add(stan::math::cauchy_lpdf<propto__>(m_0_tau, 0,
                           tau_scale));
          current_statement__ = 91;
          for (int cat = 1; cat <= M; ++cat) {
            current_statement__ = 89;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(m_0_param, "m_0_param",
                               stan::model::index_uni(cat)),
                             stan::model::rvalue(m_0_mu, "m_0_mu",
                               stan::model::index_uni(cat)), m_0_tau));
          }
        }
        current_statement__ = 98;
        if (stan::math::logical_negation(Sigma_0_known)) {
          current_statement__ = 96;
          for (int cat = 1; cat <= M; ++cat) {
            current_statement__ = 94;
            lp_accum__.add(stan::math::cauchy_lpdf<propto__>(
                             stan::model::rvalue(tau_0_param, "tau_0_param",
                               stan::model::index_uni(cat)), 0, tau_scale));
          }
        }
        current_statement__ = 101;
        for (int i = 1; i <= N_test; ++i) {
          current_statement__ = 99;
          lp_accum__.add(stan::math::multinomial_lpmf<propto__>(
                           stan::model::rvalue(z_test_counts,
                             "z_test_counts", stan::model::index_uni(i)),
                           stan::math::add(
                             stan::math::multiply(
                               stan::model::rvalue(p_test_conj,
                                 "p_test_conj", stan::model::index_uni(i)),
                               (1 - lapse_rate)), lapsing_probs)));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    // suppress unused var warning
    (void) jacobian__;
    static constexpr const char* function__ =
      "model_MNIX_ideal_adaptor_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      current_statement__ = 1;
      auto kappa_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>(K,
          lp__);
      current_statement__ = 2;
      auto nu_0 =
        in__.template read_constrain_lb<local_scalar_t__, jacobian__>((K +
          1), lp__);
      current_statement__ = 3;
      auto lapse_rate_param =
        in__.template read_constrain_lub<std::vector<local_scalar_t__>,
          jacobian__>(0, 1, lp__, lapse_rate_param_1dim__);
      current_statement__ = 4;
      auto m_0_param =
        in__.template read<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(m_0_param_1dim__,
          K);
      current_statement__ = 5;
      auto m_0_tau =
        in__.template read_constrain_lb<Eigen::Matrix<local_scalar_t__,-1,1>,
          jacobian__>(0, lp__, m_0_tau_1dim__);
      current_statement__ = 6;
      auto tau_0_param =
        in__.template read_constrain_lb<
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>, jacobian__>(0,
          lp__, tau_0_param_1dim__, K);
      std::vector<Eigen::Matrix<double,-1,1>> m_0 =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> tau_0 =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      double lapse_rate = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> lapsing_probs =
        Eigen::Matrix<double,-1,1>::Constant(M,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<double>> kappa_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<double>> nu_n =
        std::vector<std::vector<double>>(M,
          std::vector<double>(L, std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> m_n =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
          std::vector<Eigen::Matrix<double,-1,1>>(L,
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> tau_n =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
          std::vector<Eigen::Matrix<double,-1,1>>(L,
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> t_scale =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
          std::vector<Eigen::Matrix<double,-1,1>>(L,
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<Eigen::Matrix<double,-1,1>> cue_weights =
        std::vector<Eigen::Matrix<double,-1,1>>(L,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> p_test_conj =
        std::vector<Eigen::Matrix<double,-1,1>>(N_test,
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> log_p_test_conj =
        std::vector<Eigen::Matrix<double,-1,1>>(N_test,
          Eigen::Matrix<double,-1,1>::Constant(M,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(kappa_0);
      out__.write(nu_0);
      out__.write(lapse_rate_param);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m_0_param_1dim__; ++sym2__) {
          out__.write(m_0_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(m_0_tau);
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tau_0_param_1dim__; ++sym2__) {
          out__.write(tau_0_param[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 7;
      stan::model::assign(m_0,
        (mu_0_known ? stan::math::promote_scalar<local_scalar_t__>(mu_0_data) : m_0_param),
        "assigning variable m_0");
      current_statement__ = 9;
      lapse_rate = (lapse_rate_known ? stan::model::rvalue(lapse_rate_data,
                                         "lapse_rate_data",
                                         stan::model::index_uni(1)) : 
        stan::model::rvalue(lapse_rate_param, "lapse_rate_param",
          stan::model::index_uni(1)));
      current_statement__ = 10;
      stan::model::assign(lapsing_probs,
        stan::math::rep_vector((lapse_rate / M), M),
        "assigning variable lapsing_probs");
      current_statement__ = 42;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 26;
        stan::model::assign(tau_0,
          (Sigma_0_known ? stan::math::eval(
                             stan::math::multiply(
                               stan::model::rvalue(tau_0_data, "tau_0_data",
                                 stan::model::index_uni(cat)),
                               stan::math::sqrt(((nu_0 - 2) / nu_0)))) : 
          stan::math::eval(
            stan::model::rvalue(tau_0_param, "tau_0_param",
              stan::model::index_uni(cat)))), "assigning variable tau_0",
          stan::model::index_uni(cat));
        current_statement__ = 40;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 37;
          if (stan::math::logical_gt(
                stan::model::rvalue(N_exposure, "N_exposure",
                  stan::model::index_uni(cat), stan::model::index_uni(group)),
                0)) {
            current_statement__ = 32;
            stan::model::assign(kappa_n, (kappa_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 33;
            stan::model::assign(nu_n, (nu_0 +
              stan::model::rvalue(N_exposure, "N_exposure",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable nu_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 34;
            stan::model::assign(m_n,
              stan::math::divide(
                stan::math::add(
                  stan::math::multiply(kappa_0,
                    stan::model::rvalue(m_0, "m_0",
                      stan::model::index_uni(cat))),
                  stan::math::multiply(
                    stan::model::rvalue(N_exposure, "N_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)),
                    stan::model::rvalue(x_mean_exposure, "x_mean_exposure",
                      stan::model::index_uni(cat),
                      stan::model::index_uni(group)))),
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 35;
            stan::model::assign(tau_n,
              stan::math::sqrt(
                stan::math::divide(
                  stan::math::add(
                    stan::math::add(
                      stan::math::multiply(nu_0,
                        stan::math::pow(
                          stan::model::rvalue(tau_0, "tau_0",
                            stan::model::index_uni(cat)), 2)),
                      stan::model::rvalue(x_ss_exposure, "x_ss_exposure",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                    stan::math::multiply(
                      ((stan::model::rvalue(N_exposure, "N_exposure",
                          stan::model::index_uni(cat),
                          stan::model::index_uni(group)) * kappa_0) /
                      stan::model::rvalue(kappa_n, "kappa_n",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group))),
                      stan::math::pow(
                        stan::math::subtract(
                          stan::model::rvalue(m_0, "m_0",
                            stan::model::index_uni(cat)),
                          stan::model::rvalue(x_mean_exposure,
                            "x_mean_exposure", stan::model::index_uni(cat),
                            stan::model::index_uni(group))), 2))),
                  stan::model::rvalue(nu_n, "nu_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)))),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          } else {
            current_statement__ = 27;
            stan::model::assign(kappa_n, kappa_0,
              "assigning variable kappa_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 28;
            stan::model::assign(nu_n, nu_0, "assigning variable nu_n",
              stan::model::index_uni(cat), stan::model::index_uni(group));
            current_statement__ = 29;
            stan::model::assign(m_n,
              stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat)),
              "assigning variable m_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
            current_statement__ = 30;
            stan::model::assign(tau_n,
              stan::model::rvalue(tau_0, "tau_0", stan::model::index_uni(cat)),
              "assigning variable tau_n", stan::model::index_uni(cat),
              stan::model::index_uni(group));
          }
          current_statement__ = 38;
          stan::model::assign(t_scale,
            stan::math::multiply(
              stan::model::rvalue(tau_n, "tau_n",
                stan::model::index_uni(cat), stan::model::index_uni(group)),
              stan::math::sqrt(
                ((stan::model::rvalue(kappa_n, "kappa_n",
                    stan::model::index_uni(cat),
                    stan::model::index_uni(group)) + 1) /
                stan::model::rvalue(kappa_n, "kappa_n",
                  stan::model::index_uni(cat), stan::model::index_uni(group))))),
            "assigning variable t_scale", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      current_statement__ = 53;
      for (int group = 1; group <= L; ++group) {
        current_statement__ = 43;
        stan::math::validate_non_negative_index("raw_weights", "K", K);
        Eigen::Matrix<double,-1,1> raw_weights =
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 44;
        stan::model::assign(raw_weights, stan::math::rep_vector(0, K),
          "assigning variable raw_weights");
        current_statement__ = 49;
        for (int cat1 = 1; cat1 <= M; ++cat1) {
          current_statement__ = 47;
          for (int cat2 = 1; cat2 <= M; ++cat2) {
            current_statement__ = 45;
            stan::model::assign(raw_weights,
              stan::math::add(stan::model::deep_copy(raw_weights),
                stan::math::multiply(
                  (stan::model::rvalue(p_cat, "p_cat",
                     stan::model::index_uni(cat1)) *
                  stan::model::rvalue(p_cat, "p_cat",
                    stan::model::index_uni(cat2))),
                  stan::math::elt_divide(
                    stan::math::pow(
                      stan::math::subtract(
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat1),
                          stan::model::index_uni(group)),
                        stan::model::rvalue(m_n, "m_n",
                          stan::model::index_uni(cat2),
                          stan::model::index_uni(group))), 2),
                    stan::math::elt_multiply(
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat1),
                        stan::model::index_uni(group)),
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat2),
                        stan::model::index_uni(group)))))),
              "assigning variable raw_weights");
          }
        }
        current_statement__ = 50;
        stan::model::assign(raw_weights,
          stan::math::elt_divide(stan::model::deep_copy(raw_weights),
            stan::math::rep_vector(2.0, K)), "assigning variable raw_weights");
        current_statement__ = 51;
        stan::model::assign(cue_weights, stan::math::softmax(raw_weights),
          "assigning variable cue_weights", stan::model::index_uni(group));
      }
      current_statement__ = 62;
      for (int j = 1; j <= N_test; ++j) {
        int group = std::numeric_limits<int>::min();
        current_statement__ = 55;
        group = stan::model::rvalue(y_test, "y_test",
                  stan::model::index_uni(j));
        current_statement__ = 59;
        for (int cat = 1; cat <= M; ++cat) {
          current_statement__ = 56;
          stan::model::assign(log_p_test_conj,
            stan::math::student_t_lpdf<false>(
              stan::model::rvalue(x_test, "x_test", stan::model::index_uni(j)),
              stan::model::rvalue(nu_n, "nu_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                stan::model::index_uni(group)),
              stan::model::rvalue(t_scale, "t_scale",
                stan::model::index_uni(cat), stan::model::index_uni(group))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
          current_statement__ = 57;
          stan::model::assign(log_p_test_conj,
            stan::math::sum(
              stan::math::multiply(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j), stan::model::index_uni(cat)),
                stan::model::rvalue(cue_weights, "cue_weights",
                  stan::model::index_uni(group)))),
            "assigning variable log_p_test_conj", stan::model::index_uni(j),
            stan::model::index_uni(cat));
        }
        current_statement__ = 60;
        stan::model::assign(p_test_conj,
          stan::math::exp(
            stan::math::subtract(
              stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                stan::model::index_uni(j)),
              stan::math::log_sum_exp(
                stan::model::rvalue(log_p_test_conj, "log_p_test_conj",
                  stan::model::index_uni(j))))),
          "assigning variable p_test_conj", stan::model::index_uni(j));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "tau_0", tau_0, 0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "kappa_n", kappa_n, K);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "nu_n", nu_n, K);
      current_statement__ = 16;
      stan::math::check_simplex(function__, "cue_weights", cue_weights);
      current_statement__ = 17;
      stan::math::check_simplex(function__, "p_test_conj", p_test_conj);
      if (emit_transformed_parameters__) {
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(m_0[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(tau_0[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(lapse_rate);
        out__.write(lapsing_probs);
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(kappa_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            out__.write(nu_n[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              out__.write(m_n[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        current_statement__ = 14;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              out__.write(tau_n[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        current_statement__ = 15;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
              out__.write(t_scale[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
            out__.write(cue_weights[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 17;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            out__.write(p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
            out__.write(log_p_test_conj[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      double log_lik_sum = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      log_lik_sum = 0;
      Eigen::Matrix<double,-1,1> log_lik =
        Eigen::Matrix<double,-1,1>::Constant(N_test,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 66;
      for (int n = 1; n <= N_test; ++n) {
        current_statement__ = 63;
        stan::model::assign(log_lik,
          stan::math::multinomial_lpmf<false>(
            stan::model::rvalue(z_test_counts, "z_test_counts",
              stan::model::index_uni(n)),
            stan::math::add(
              stan::math::multiply(
                stan::model::rvalue(p_test_conj, "p_test_conj",
                  stan::model::index_uni(n)), (1 - lapse_rate)),
              lapsing_probs)), "assigning variable log_lik",
          stan::model::index_uni(n));
        current_statement__ = 64;
        log_lik_sum = (log_lik_sum +
          stan::model::rvalue(log_lik, "log_lik", stan::model::index_uni(n)));
      }
      Eigen::Matrix<double,-1,1> log_lik_split =
        Eigen::Matrix<double,-1,1>::Constant(log_lik_split_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 77;
      if (stan::math::logical_eq(split_loglik_per_observation, 1)) {
        int idx = std::numeric_limits<int>::min();
        current_statement__ = 67;
        idx = 1;
        current_statement__ = 75;
        for (int n = 1; n <= N_test; ++n) {
          current_statement__ = 73;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 71;
            for (int i = 1; i <=
                 stan::model::rvalue(z_test_counts, "z_test_counts",
                   stan::model::index_uni(n), stan::model::index_uni(m)); ++i) {
              current_statement__ = 68;
              stan::model::assign(log_lik_split,
                stan::math::log(
                  ((stan::model::rvalue(p_test_conj, "p_test_conj",
                      stan::model::index_uni(n), stan::model::index_uni(m)) *
                  (1 - lapse_rate)) +
                  stan::model::rvalue(lapsing_probs, "lapsing_probs",
                    stan::model::index_uni(m)))),
                "assigning variable log_lik_split",
                stan::model::index_uni(idx));
              current_statement__ = 69;
              idx = (idx + 1);
            }
          }
        }
      }
      std::vector<Eigen::Matrix<double,-1,1>> m_0_original =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> S_0_original =
        std::vector<Eigen::Matrix<double,-1,1>>(M,
          Eigen::Matrix<double,-1,1>::Constant(K,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> m_n_original =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
          std::vector<Eigen::Matrix<double,-1,1>>(L,
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<Eigen::Matrix<double,-1,1>>> S_n_original =
        std::vector<std::vector<Eigen::Matrix<double,-1,1>>>(M,
          std::vector<Eigen::Matrix<double,-1,1>>(L,
            Eigen::Matrix<double,-1,1>::Constant(K,
              std::numeric_limits<double>::quiet_NaN())));
      current_statement__ = 85;
      for (int cat = 1; cat <= M; ++cat) {
        current_statement__ = 78;
        stan::model::assign(m_0_original,
          stan::math::subtract(
            stan::math::multiply(INV_SCALE,
              stan::model::rvalue(m_0, "m_0", stan::model::index_uni(cat))),
            shift), "assigning variable m_0_original",
          stan::model::index_uni(cat));
        current_statement__ = 79;
        stan::model::assign(S_0_original,
          stan::math::diagonal(
            stan::math::multiply(
              stan::math::multiply(INV_SCALE,
                stan::math::diag_matrix(
                  stan::math::pow(
                    stan::model::rvalue(tau_0, "tau_0",
                      stan::model::index_uni(cat)), 2))),
              stan::math::transpose(INV_SCALE))),
          "assigning variable S_0_original", stan::model::index_uni(cat));
        current_statement__ = 83;
        for (int group = 1; group <= L; ++group) {
          current_statement__ = 80;
          stan::model::assign(m_n_original,
            stan::math::subtract(
              stan::math::multiply(INV_SCALE,
                stan::model::rvalue(m_n, "m_n", stan::model::index_uni(cat),
                  stan::model::index_uni(group))), shift),
            "assigning variable m_n_original", stan::model::index_uni(cat),
            stan::model::index_uni(group));
          current_statement__ = 81;
          stan::model::assign(S_n_original,
            stan::math::diagonal(
              stan::math::multiply(
                stan::math::multiply(INV_SCALE,
                  stan::math::diag_matrix(
                    stan::math::pow(
                      stan::model::rvalue(tau_n, "tau_n",
                        stan::model::index_uni(cat),
                        stan::model::index_uni(group)), 2))),
                stan::math::transpose(INV_SCALE))),
            "assigning variable S_n_original", stan::model::index_uni(cat),
            stan::model::index_uni(group));
        }
      }
      out__.write(log_lik_sum);
      out__.write(log_lik);
      out__.write(log_lik_split);
      current_statement__ = 22;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(m_0_original[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      current_statement__ = 23;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          out__.write(S_0_original[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      current_statement__ = 24;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            out__.write(m_n_original[(sym3__ - 1)][(sym2__ - 1)][(sym1__ -
              1)]);
          }
        }
      }
      current_statement__ = 25;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            out__.write(S_n_original[(sym3__ - 1)][(sym2__ - 1)][(sym1__ -
              1)]);
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      local_scalar_t__ kappa_0 = DUMMY_VAR__;
      current_statement__ = 1;
      kappa_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(K, kappa_0);
      local_scalar_t__ nu_0 = DUMMY_VAR__;
      current_statement__ = 2;
      nu_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb((K + 1), nu_0);
      std::vector<local_scalar_t__> lapse_rate_param =
        std::vector<local_scalar_t__>(lapse_rate_param_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(lapse_rate_param,
        in__.read<std::vector<local_scalar_t__>>(lapse_rate_param_1dim__),
        "assigning variable lapse_rate_param");
      out__.write_free_lub(0, 1, lapse_rate_param);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m_0_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(m_0_param_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= m_0_param_1dim__; ++sym2__) {
          current_statement__ = 4;
          stan::model::assign(m_0_param, in__.read<local_scalar_t__>(),
            "assigning variable m_0_param", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(m_0_param);
      Eigen::Matrix<local_scalar_t__,-1,1> m_0_tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_0_tau_1dim__,
          DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(m_0_tau,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(m_0_tau_1dim__),
        "assigning variable m_0_tau");
      out__.write_free_lb(0, m_0_tau);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> tau_0_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(tau_0_param_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= tau_0_param_1dim__; ++sym2__) {
          current_statement__ = 6;
          stan::model::assign(tau_0_param, in__.read<local_scalar_t__>(),
            "assigning variable tau_0_param", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, tau_0_param);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    // suppress unused var warning
    (void) current_statement__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "kappa_0",
        "double", std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "nu_0", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "lapse_rate_param",
        "double",
        std::vector<size_t>{static_cast<size_t>(lapse_rate_param_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "m_0_param",
        "double",
        std::vector<size_t>{static_cast<size_t>(m_0_param_1dim__),
          static_cast<size_t>(K)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "m_0_tau",
        "double", std::vector<size_t>{static_cast<size_t>(m_0_tau_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "tau_0_param",
        "double",
        std::vector<size_t>{static_cast<size_t>(tau_0_param_1dim__),
          static_cast<size_t>(K)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ kappa_0 = DUMMY_VAR__;
      current_statement__ = 1;
      kappa_0 = context__.vals_r("kappa_0")[(1 - 1)];
      out__.write_free_lb(K, kappa_0);
      local_scalar_t__ nu_0 = DUMMY_VAR__;
      current_statement__ = 2;
      nu_0 = context__.vals_r("nu_0")[(1 - 1)];
      out__.write_free_lb((K + 1), nu_0);
      std::vector<local_scalar_t__> lapse_rate_param =
        std::vector<local_scalar_t__>(lapse_rate_param_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      lapse_rate_param = context__.vals_r("lapse_rate_param");
      out__.write_free_lub(0, 1, lapse_rate_param);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> m_0_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(m_0_param_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> m_0_param_flat__;
        current_statement__ = 4;
        m_0_param_flat__ = context__.vals_r("m_0_param");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= m_0_param_1dim__; ++sym2__) {
            stan::model::assign(m_0_param, m_0_param_flat__[(pos__ - 1)],
              "assigning variable m_0_param", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(m_0_param);
      Eigen::Matrix<local_scalar_t__,-1,1> m_0_tau =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(m_0_tau_1dim__,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> m_0_tau_flat__;
        current_statement__ = 5;
        m_0_tau_flat__ = context__.vals_r("m_0_tau");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= m_0_tau_1dim__; ++sym1__) {
          stan::model::assign(m_0_tau, m_0_tau_flat__[(pos__ - 1)],
            "assigning variable m_0_tau", stan::model::index_uni(sym1__));
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0, m_0_tau);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> tau_0_param =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(tau_0_param_1dim__,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(K, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> tau_0_param_flat__;
        current_statement__ = 6;
        tau_0_param_flat__ = context__.vals_r("tau_0_param");
        pos__ = 1;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= tau_0_param_1dim__; ++sym2__) {
            stan::model::assign(tau_0_param, tau_0_param_flat__[(pos__ - 1)],
              "assigning variable tau_0_param",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write_free_lb(0, tau_0_param);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"kappa_0", "nu_0", "lapse_rate_param",
                "m_0_param", "m_0_tau", "tau_0_param"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"m_0", "tau_0", "lapse_rate", "lapsing_probs", "kappa_n",
             "nu_n", "m_n", "tau_n", "t_scale", "cue_weights", "p_test_conj",
             "log_p_test_conj"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"log_lik_sum", "log_lik", "log_lik_split", "m_0_original",
             "S_0_original", "m_n_original", "S_n_original"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(
                                      lapse_rate_param_1dim__)},
                std::vector<size_t>{static_cast<size_t>(m_0_param_1dim__),
                  static_cast<size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(m_0_tau_1dim__)},
                std::vector<size_t>{static_cast<size_t>(tau_0_param_1dim__),
                  static_cast<size_t>(K)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(K)}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(L),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(N_test),
               static_cast<size_t>(M)},
             std::vector<size_t>{static_cast<size_t>(N_test),
               static_cast<size_t>(M)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(N_test)},
             std::vector<size_t>{static_cast<size_t>(log_lik_split_1dim__)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L), static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(M),
               static_cast<size_t>(L), static_cast<size_t>(K)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= lapse_rate_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lapse_rate_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= m_0_param_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "m_0_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= m_0_tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "m_0_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tau_0_param_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "tau_0_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "tau_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "lapse_rate");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "lapsing_probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "kappa_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "m_n" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "tau_n" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "t_scale" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          param_names__.emplace_back(std::string() + "cue_weights" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_test_conj" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_p_test_conj" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_lik_sum");
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_split_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_split" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_0_original" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "S_0_original" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "m_n_original" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "S_n_original" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "kappa_0");
    param_names__.emplace_back(std::string() + "nu_0");
    for (int sym1__ = 1; sym1__ <= lapse_rate_param_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "lapse_rate_param" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= m_0_param_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "m_0_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    for (int sym1__ = 1; sym1__ <= m_0_tau_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "m_0_tau" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= tau_0_param_1dim__; ++sym2__) {
        param_names__.emplace_back(std::string() + "tau_0_param" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "tau_0" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      param_names__.emplace_back(std::string() + "lapse_rate");
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        param_names__.emplace_back(std::string() + "lapsing_probs" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "kappa_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "nu_n" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "m_n" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "tau_n" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "t_scale" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= (K - 1); ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          param_names__.emplace_back(std::string() + "cue_weights" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= (M - 1); ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "p_test_conj" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_test; ++sym2__) {
          param_names__.emplace_back(std::string() + "log_p_test_conj" + '.'
            + std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
    }
    if (emit_generated_quantities__) {
      param_names__.emplace_back(std::string() + "log_lik_sum");
      for (int sym1__ = 1; sym1__ <= N_test; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= log_lik_split_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik_split" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "m_0_original" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
          param_names__.emplace_back(std::string() + "S_0_original" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "m_n_original" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= L; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= M; ++sym3__) {
            param_names__.emplace_back(std::string() + "S_n_original" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lapse_rate_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lapse_rate_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"m_0_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m_0_param_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"m_0_tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_0_tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"tau_0_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_0_param_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lapsing_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"cue_weights\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik_sum\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_split\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_split_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_0_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"S_0_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"m_n_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"S_n_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"kappa_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"nu_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lapse_rate_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(lapse_rate_param_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"m_0_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(m_0_param_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"m_0_tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(m_0_tau_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"tau_0_param\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(tau_0_param_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"m_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_0\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"lapse_rate\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lapsing_probs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kappa_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"nu_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"m_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"tau_n\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"t_scale\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"transformed_parameters\"},{\"name\":\"cue_weights\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((K -1)) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string((M -1)) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_p_test_conj\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(M) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik_sum\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_test) + "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_split\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(log_lik_split_1dim__) + "},\"block\":\"generated_quantities\"},{\"name\":\"m_0_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"S_0_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"generated_quantities\"},{\"name\":\"m_n_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"generated_quantities\"},{\"name\":\"S_n_original\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(M) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(L) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + lapse_rate_param_1dim__) +
      (m_0_param_1dim__ * K)) + m_0_tau_1dim__) + (tau_0_param_1dim__ * K));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((M * K) + (M * K)) + 1) + M) + (M * L)) + (M * L)) + (M *
      (L * K))) + (M * (L * K))) + (M * (L * K))) + (L * K)) + (N_test * M))
      + (N_test * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((1 +
      N_test) + log_lik_split_1dim__) + (M * K)) + (M * K)) + (M * (L * K)))
      + (M * (L * K))));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((1 + 1) + lapse_rate_param_1dim__) +
      (m_0_param_1dim__ * K)) + m_0_tau_1dim__) + (tau_0_param_1dim__ * K));
    const size_t num_transformed = emit_transformed_parameters *
      (((((((((((((M * K) + (M * K)) + 1) + M) + (M * L)) + (M * L)) + (M *
      (L * K))) + (M * (L * K))) + (M * (L * K))) + (L * K)) + (N_test * M))
      + (N_test * M)));
    const size_t num_gen_quantities = emit_generated_quantities * (((((((1 +
      N_test) + log_lik_split_1dim__) + (M * K)) + (M * K)) + (M * (L * K)))
      + (M * (L * K))));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_MNIX_ideal_adaptor_namespace::model_MNIX_ideal_adaptor;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_MNIX_ideal_adaptor_namespace::profiles__;
}
#endif
#endif
