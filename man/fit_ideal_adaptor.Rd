% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit-IA-stanfit.R
\name{fit_ideal_adaptor}
\alias{fit_ideal_adaptor}
\title{Fit ideal adaptor}
\usage{
fit_ideal_adaptor(
  staninput,
  file = NULL,
  file_refit = "never",
  file_compress = T,
  stanvars = NULL,
  backend = "rstan",
  save_pars = NULL,
  basis = NULL,
  chains = 4,
  iter = 2000,
  warmup = 1000,
  init = "random",
  control = NULL,
  silent = 1,
  verbose = F,
  stan_model_args = list(),
  stanmodel = NULL,
  rename = T,
  ...
)
}
\arguments{
\item{staninput}{A list of the type returned by \code{\link{make_staninput}}.}

\item{file}{Either NULL or a character string. In the latter case, the fitted model object is saved
via saveRDS in a file named after the string supplied in file. The .rds extension is added automatically.
If the file already exists, the model from that file will be loaded and returned instead of refitting the model.
As existing files won't be overwritten, you have to manually remove the file in order to refit and save the
model under an existing file name. The file name is stored in the \code{ideal_adaptor_stanfit} object
for later use. (default: \code{NULL})}

\item{file_refit}{Modifies when the fit stored via the \code{file} argument
is re-used. For \code{"never"} (default) the fit is always loaded if it
exists and fitting is skipped. For \code{"always"} the model is always
refitted. If set to \code{"on_change"}, model will be refit if data passed to
Stan differ from
what is stored in the file. Refit will not be triggered for changes in
additional parameters of the fit (e.g., initial values, number of iterations,
control arguments, ...).}

\item{file_compress}{Logical or a character string, specifying one of the
compression algorithms supported by \code{\link{saveRDS}}. If the
\code{file} argument is provided, this compression will be used when saving
the fitted model object.}

\item{backend}{Character string naming the package to use as the backend for
fitting the Stan model. Options are \code{"rstan"} (the default) or
\code{"cmdstanr"}. Details on the
\pkg{rstan} and \pkg{cmdstanr} packages are available at
\url{https://mc-stan.org/rstan/} and \url{https://mc-stan.org/cmdstanr/},
respectively.}

\item{silent}{Verbosity level between \code{0} and \code{2}.
If \code{1} (the default), most of the
informational messages of compiler and sampler are suppressed.
If \code{2}, even more messages are suppressed. The actual
sampling progress is still printed. Set \code{refresh = 0} to turn this off
as well. If using \code{backend = "rstan"} you can also set
\code{open_progress = FALSE} to prevent opening additional progress bars.}

\item{stan_model_args}{A \code{list} of further arguments passed to
\code{\link[rstan:stan_model]{rstan::stan_model}} for \code{backend =
"rstan"} or to \code{cmdstanr::cmdstan_model} for \code{backend =
"cmdstanr"}, which allows to change how models are compiled.}

\item{stanmodel}{Name of stanmodel that should be used. Overrides any default selection.}

\item{rename}{For internal use only.}

\item{...}{Additional parameters are passed to \code{\link[rstan]{sampling}}.}
}
\value{
An object of class \code{ideal_adaptor_stanfit} with the fitted stan model.
}
\description{
Infers a prior and posterior distribution of ideal adaptors from the input data using Stan. Currently, three
types of ideal adaptor models are available, each using a conjugate prior over Gaussian or multivariate
Gaussian categories:
}
\details{
\itemize{
 \item{\code{NIW_ideal_adaptor}:} A Normal-Inverse-Wishart (NIW) prior over the ideal adaptor. This is the
   default model with multivariate Gaussian categories. Accepts univariate and multivariate input, though
   the NIX model should be faster for univariate input.
 \item{\code{NIX_ideal_adaptor}:} A Normal-Inverse-Chisquare (NIX) prior over the ideal adaptor with with
   univariate Gaussian categories. Accepts only univariate input.
 \item{\code{MNIX_ideal_adaptor}:} Separate NIXs for each of multiple cues that are integrated over during
   categorization(cue integration) assuming ideal cue weights based on the relative informativity of each cue.
   Accepts univariate and multivariate input, though the NIX model should be faster for univariate input.
}


  In interpreting the inferred parameters, it should be kept in mind that the \emph{inferred} scatter matrix
  (e.g., S_0) for the NIW model) includes
  variability from internal perceptual and/or external environmental noise, \emph{in addition} to the motor
  noise that is reflected in production data. This also implies that, \strong{if \code{Sigma_0} is provided
  by the user it should be arguably convolved with an estimate of perceptual noise}. This is particularly
  important if the data you're fitting contains test phases without exposure (e.g., pre-exposure tests).

  Make sure to read the notes about the \code{Sigma_0} argument in the help page on \code{\link{make_staninput}}.
  Use \code{methods(class = "ideal_adaptor_stanfit")} for an overview on available methods.
}
\seealso{
\code{\link{is.ideal_adaptor_stanfit}} for information about ideal_adaptor_stanfit objects,
\code{\link{get_draws}} to draw samples from the stanfit.
}
